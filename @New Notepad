3.  **Verify/Update Extractors:**
    *   Confirm `LegacyAPIExtractor` handles `modified_since` (from `--days`) and `sku` filters correctly, translating them to the required OData `$filter` syntax. The handling of `$top` and `parent_record_ids`/`parent_field` seems correct based on `sync_products` test.

4.  **Testing Refactored Syncs:**
    *   **Add to Script:** After refactoring each sync command (e.g., `sync_sales_records`), add its corresponding call to the `run_top1_syncs.py` script:
        ```python
        # Example for sales records after refactoring
        sales_sync_args = ['sync_sales_records', '--top=1'] 
        sync_results[' '.join(sales_sync_args)] = run_sync_command(sales_sync_args)
        ```
    *   **Run:** Execute the script from the terminal: `python run_top1_syncs.py`.
    *   **Verify:** Check the final "Sync Script Summary" section in the output. Ensure the newly added sync command shows as "PASSED".
    *   **Debug (if needed):** If a sync fails, review the STDOUT/STDERR printed by the script. For more detail, you can temporarily modify `run_sync_command` in the script to print more output even on success (e.g., uncomment `print(result.stdout[-500:])`).
    *   **Purpose:** This allows sequential testing of each refactored sync with `--top=1` under real conditions, verifying the base command integration and ensuring no regressions before wider testing or deployment.

This systematic refactoring will significantly reduce code duplication and make filter handling consistent across all sync workflows. 