name: CI

on:
  push:
    branches: [ prod, dev ]
  pull_request:
    branches: [ prod, dev ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.dev.txt
      
      - name: Lint with flake8
        run: flake8 pyerp tests
      
      - name: Check formatting with black
        run: black --check pyerp tests
      
      - name: Check imports with isort
        run: isort --check-only --profile black pyerp tests
      
      - name: Type check with mypy
        run: mypy pyerp
      
      - name: Security check with bandit
        run: bandit -c pyproject.toml -r pyerp

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pyerp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.dev.txt
      
      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/pyerp_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest --cov=pyerp --cov-report=xml
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Wilhelm-Schweizer/pyERP
          file: ./coverage.xml
          fail_ci_if_error: true

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.prod
          push: false
          tags: pyerp-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/pyerp-backend.tar
      
      - name: Upload backend Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyerp-backend
          path: /tmp/pyerp-backend.tar
          retention-days: 1
      
      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: pyerp-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/pyerp-frontend.tar
      
      - name: Upload frontend Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyerp-frontend
          path: /tmp/pyerp-frontend.tar
          retention-days: 1
