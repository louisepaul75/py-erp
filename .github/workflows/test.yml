name: Test and Lint

on:
  # This workflow is primarily used for direct testing of PRs/branches
  push:
    branches: [ main, develop, 'release/**', 'feature/**', 'bugfix/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop, 'release/**' ]
  # Enable reuse as a standalone workflow
  workflow_call:

jobs:
  # Individual test jobs are defined in deploy.yml workflow
  # This workflow runs the same tests but as a standalone workflow
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check types with mypy
      run: |
        mypy .

  tests:
    runs-on: ubuntu-latest
    needs: [lint]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pyerp_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Test with pytest
      env:
        DJANGO_SETTINGS_MODULE: pyerp.settings.testing
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/pyerp_test
      run: |
        pytest --cov=. --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: d21bebd3-0087-4c7c-bb78-c9dcaa8e83b5
        file: ./coverage.xml
        fail_ci_if_error: false
        flags: unittests
        name: pyERP-coverage
        verbose: true
        
    - name: Check coverage thresholds
      run: |
        coverage report --fail-under=80 || echo "::warning::Coverage is below 80%"
        
    - name: Check branch-specific requirements
      run: |
        if [[ $GITHUB_REF == refs/heads/main || $GITHUB_REF =~ refs/heads/release/.* ]]; then
          echo "Running additional checks for main and release branches"
          # Add stricter checks for main and release branches
          coverage report --fail-under=80 || exit 1
        fi 