name: Test Suite

on:
  push:
    branches: [ prod, dev ]
  pull_request:
    branches: [ prod, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [ui, backend, core, unit]
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pyerp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.dev.txt

      # Set up Node.js for UI tests
      - name: Set up Node.js
        if: matrix.test-group == 'ui' || matrix.test-group == 'all'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend-react/package-lock.json'

      # Install Node.js dependencies for UI tests
      - name: Install Node.js dependencies
        if: matrix.test-group == 'ui' || matrix.test-group == 'all'
        working-directory: frontend-react
        run: npm ci

      - name: Run ${{ matrix.test-group }} tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/pyerp_test
          REDIS_URL: redis://localhost:6379/0
          TEST_GROUP: ${{ matrix.test-group }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          # Make sure test script is executable
          chmod +x run_all_tests.sh
          
          # Run tests using the main wrapper script
          ./run_all_tests.sh --type ${{ matrix.test-group }}

      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-group }}
          path: coverage/*-junit.xml
          retention-days: 14

      - name: Store coverage results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-results-${{ matrix.test-group }}
          path: coverage/*-coverage.xml
          retention-days: 14

  upload-results:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: "*-*"
          merge-multiple: true

      - name: Upload test results to Codecov
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: artifacts/*-junit.xml
          name: pyerp-test-results
          fail_ci_if_error: false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Wilhelm-Schweizer/pyERP
          directory: artifacts/
          fail_ci_if_error: false
          
      - name: Archive all results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: all-test-results
          path: artifacts/
          retention-days: 14
