---
description: 
globs: 
alwaysApply: false
---
# Environment Setup Guidelines

## Description
This document provides comprehensive guidelines for setting up and maintaining development, testing, and production environments for the Inventory Management System. It ensures consistency across different environments and helps new team members quickly set up their development environment.

Key aspects covered:
- Python environment setup
- Database configuration
- Environment variables
- Configuration files
- Testing environment
- Security settings
- Deployment procedures

## Python Environment
- Use Python 3.11 or higher
- Create virtual environment for isolation
- Use `requirements.txt` for dependency management
- Pin dependency versions for stability

## Development Environment
```bash
# Create virtual environment
python -m venv venv

# Activate virtual environment
# Windows
venv\Scripts\activate
# Unix/MacOS
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt
```

## Environment Variables
- Use `.env` file for local development
- Never commit `.env` files to version control
- Use environment variables for sensitive data:
  ```
  DB_HOST=localhost
  DB_PORT=3306
  DB_NAME=inventory
  DB_USER=user
  DB_PASSWORD=password
  ```

## Database Setup
- Use MySQL 8.0 or higher
- Create separate databases for:
  - Development
  - Testing
  - Production
- Follow naming convention:
  ```
  inventory_dev
  inventory_test
  inventory_prod
  ```

## Configuration Files
- Use `config.ini` for application configuration
- Separate configurations by environment:
  ```ini
  [DEFAULT]
  debug = False
  
  [development]
  debug = True
  database = inventory_dev
  
  [test]
  database = inventory_test
  
  [production]
  database = inventory_prod
  ```

## Testing Environment
- Use pytest for testing
- Configure test database separately
- Use fixtures for test data
- Clean up test data after each test

## Streamlit Configuration
- Use `.streamlit/config.toml` for Streamlit settings
- Configure theme and appearance
- Set server options
- Configure authentication

## Logging
- Configure logging for each environment
- Use different log levels:
  - Development: DEBUG
  - Test: INFO
  - Production: WARNING
- Rotate log files regularly

## Security
- Use HTTPS in production
- Enable CORS protection
- Set secure headers
- Configure session security
- Use secure cookie settings

## Deployment
- Use deployment checklist
- Configure production settings
- Set up monitoring
- Configure backups
- Enable error tracking 