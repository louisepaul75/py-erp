---
description: This document provides comprehensive guidelines for setting up and maintaining development, testing, and production environments for the pyERP system. It ensures consistency across different environments and helps new team members quickly set up their development environment.
globs:
---
# Environment Setup Guidelines for pyERP

## Overview
This document provides comprehensive guidelines for setting up and maintaining development, testing, and production environments for the pyERP system. It ensures consistency across different environments and helps new team members quickly set up their development environment.

Key aspects covered:
- Python environment setup
- Database configuration
- Environment variables
- Configuration files
- Testing environment
- Security settings
- Deployment procedures

## Python Environment
- Use Python 3.9 or higher
- Create virtual environment for isolation
- Use `requirements.txt` for dependency management
- Pin dependency versions for stability

## Development Environment Setup
```bash
# Create virtual environment
python -m venv venv

# Activate virtual environment (Windows PowerShell)
.\venv\Scripts\Activate.ps1

# Install dependencies
pip install -r requirements.txt

# Install development dependencies
pip install -r requirements-dev.txt

# Run migrations
python manage.py migrate

# Create superuser
python manage.py createsuperuser

# Run server
python manage.py runserver
```

## Environment Variables
- Use `.env` file for local development
- Never commit `.env` files to version control
- Use environment variables for sensitive data:
  ```
  # Database settings
  DB_ENGINE=django.db.backends.postgresql
  DB_NAME=pyerp_dev
  DB_USER=postgres
  DB_PASSWORD=secure_password
  DB_HOST=localhost
  DB_PORT=5432

  # Legacy API settings
  LEGACY_API_URL=https://legacy-api.example.com
  LEGACY_API_USER=api_user
  LEGACY_API_PASSWORD=api_password

  # Security settings
  SECRET_KEY=your-secret-key
  DEBUG=True
  ALLOWED_HOSTS=localhost,127.0.0.1

  # Email settings
  EMAIL_HOST=smtp.example.com
  EMAIL_PORT=587
  EMAIL_HOST_USER=noreply@example.com
  EMAIL_HOST_PASSWORD=email_password
  EMAIL_USE_TLS=True
  ```

## Database Setup
- Use PostgreSQL 13.0 or higher
- Create separate databases for:
  - Development: `pyerp_dev`
  - Testing: `pyerp_test`
  - Production: `pyerp_prod`
- Create dedicated database users with appropriate permissions
- Enable UTF-8 character set and collation

## Database Selection Guidelines
- Always be explicit about which database you're targeting
- For development:
  - Use local development database by default
  - For legacy API integration, specify test environment explicitly
- For production:
  - Always confirm before performing operations on live database
  - Use database connection parameter in Django settings
- Use Django's multi-database support for legacy system integration

## Django Settings
- Use settings module with inheritance:
  - `base.py`: Common settings
  - `development.py`: Development-specific settings
  - `production.py`: Production-specific settings
  - `test.py`: Test-specific settings
- Load appropriate settings based on environment variable:
  ```python
  # settings/__init__.py
  import os

  env = os.environ.get('DJANGO_ENV', 'development')

  if env == 'production':
      from .production import *
  elif env == 'test':
      from .test import *
  else:
      from .development import *
  ```

## Docker Setup
- Use Docker for production deployment
- Multi-stage builds for optimized images
- Use Docker Compose for orchestration
- Separate containers for:
  - Django application
  - MySQL database
  - Redis (for caching/queues)
  - Celery workers
- Mount volumes for persistent data

## Docker Development Environment
```yaml
# docker-compose.yml
version: '3'

services:
  db:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=pyerp_dev
      - MYSQL_USER=pyerp_user
      - MYSQL_PASSWORD=pyerp_password
      - MYSQL_ROOT_PASSWORD=root_password
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"

  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    depends_on:
      - db
    env_file:
      - .env

volumes:
  mysql_data:
```

## Environment-Specific Commands
Always ensure commands are appropriate for the current environment:

### Development (Windows PowerShell)
```powershell
# Activate virtual environment
.\venv\Scripts\Activate.ps1

# Run development server
python manage.py runserver

# Run tests
python manage.py test

# Generate migrations
python manage.py makemigrations

# Apply migrations
python manage.py migrate
```

### Production (Docker)
```bash
# Build and start containers
docker-compose build
docker-compose up -d

# Run migrations
docker-compose exec web python manage.py migrate

# Collect static files
docker-compose exec web python manage.py collectstatic --no-input

# Check logs
docker-compose logs -f web
```

## Legacy API Integration
- Configure separate environments for legacy API:
  - Test: For development and testing
  - Live: For production
- Store credentials securely
- Use environment variables to specify which environment to use
- Add timeout and retry logic for robustness
- Implement proper error handling

## Cache Configuration
- Use Redis for caching in production
- Use local memory cache for development
- Configure cache timeout appropriately
- Define cache keys consistently

## Logging Configuration
- Configure different log levels by environment:
  - Development: DEBUG
  - Test: INFO
  - Production: WARNING
- Rotate log files
- Log to console in development
- Log to files in production
- Configure Django and application logging separately

## Security Considerations
- Use HTTPS in production
- Configure secure cookies
- Set appropriate security headers
- Use Django's security middleware
- Regularly update dependencies

## Backup and Recovery
- Schedule regular database backups
- Store backups securely
- Test restore procedures
- Document disaster recovery process

## CI/CD Pipeline
- Automatically run tests on commits
- Enforce code quality checks
- Build Docker images
- Deploy to staging environment
- Manual promotion to production

## Environment Verification Checklist
Before deployment, verify:
1. Environment variables are set correctly
2. Database connection is configured properly
3. Legacy API settings are correct
4. Static files are collected
5. Migrations are applied
6. Security settings are appropriate
7. Backup system is operational
