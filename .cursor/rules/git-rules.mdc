---
description: This document establishes standardized Git workflows and best practices for the pyERP system. It ensures consistent version control practices, making it easier to track changes, manage releases, and collaborate effectively across the team.
globs:
---
# Git Workflow Standards for pyERP

## Overview
This document establishes standardized Git workflows and best practices for the pyERP system. It ensures consistent version control practices across the team.

## Branch Strategy

### 1. Main Branches
- `main`: Production-ready code
- `develop`: Integration branch for features
- `staging`: Pre-production testing

### 2. Supporting Branches
- `feature/*`: New features
- `bugfix/*`: Bug fixes
- `hotfix/*`: Production fixes
- `release/*`: Release preparation

## Commit Messages

### 1. Format
```
<type>(<scope>): <subject>

<body>

<footer>
```

### 2. Types
- `feat`: New feature
- `fix`: Bug fix
- `docs`: Documentation
- `style`: Formatting
- `refactor`: Code restructuring
- `test`: Adding tests
- `chore`: Maintenance

### 3. Examples
```
feat(legacy-api): implement internal WSZ API module

- Add proper session management with Django cache
- Implement configurable environment settings
- Add comprehensive error handling
- Include test coverage

Closes #123
```

```
fix(product-images): resolve image loading timeout issues

- Add retry logic for API requests
- Implement proper error handling
- Add placeholder images for failed requests

Fixes #456
```

## Workflow Procedures

### 1. Feature Development
1. Create feature branch from `develop`
   ```bash
   git checkout develop
   git pull
   git checkout -b feature/legacy-api-integration
   ```

2. Develop and commit changes
   ```bash
   git add .
   git commit -m "feat(legacy-api): implement session management"
   ```

3. Push branch to remote
   ```bash
   git push -u origin feature/legacy-api-integration
   ```

4. Create Pull Request to `develop`
5. After review and approval, merge to `develop`

### 2. Bug Fixes
1. Create bugfix branch from `develop`
   ```bash
   git checkout develop
   git pull
   git checkout -b bugfix/image-loading-timeout
   ```

2. Fix and commit changes
   ```bash
   git add .
   git commit -m "fix(product-images): add retry logic for API requests"
   ```

3. Push branch to remote
   ```bash
   git push -u origin bugfix/image-loading-timeout
   ```

4. Create Pull Request to `develop`
5. After review and approval, merge to `develop`

### 3. Hotfixes
1. Create hotfix branch from `main`
   ```bash
   git checkout main
   git pull
   git checkout -b hotfix/critical-api-failure
   ```

2. Fix and commit changes
   ```bash
   git add .
   git commit -m "fix(api): resolve critical authentication failure"
   ```

3. Push branch to remote
   ```bash
   git push -u origin hotfix/critical-api-failure
   ```

4. Create Pull Requests to both `main` and `develop`
5. After review and approval, merge to both branches

### 4. Releases
1. Create release branch from `develop`
   ```bash
   git checkout develop
   git pull
   git checkout -b release/1.2.0
   ```

2. Make release preparations
   ```bash
   git add .
   git commit -m "chore(release): prepare version 1.2.0"
   ```

3. Push branch to remote
   ```bash
   git push -u origin release/1.2.0
   ```

4. Create Pull Request to `main`
5. After review and approval, merge to `main`
6. Tag the release
   ```bash
   git checkout main
   git pull
   git tag -a v1.2.0 -m "Release version 1.2.0"
   git push origin v1.2.0
   ```
7. Merge changes back to `develop`

## Pull Request Process

### 1. PR Template
```markdown
## Description
[Description of changes]

## Related Issues
Closes #123

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Breaking change
- [ ] Documentation update

## Testing Performed
- [ ] Unit tests added/updated
- [ ] Integration tests added/updated
- [ ] Manual testing performed

## Checklist
- [ ] Code follows style guidelines
- [ ] Documentation updated
- [ ] Tests cover changes
- [ ] Verified in development environment
```

### 2. Review Requirements
- At least one approving review required
- All CI checks must pass
- All discussions must be resolved

## Git Best Practices

### 1. Commits
- Make small, focused commits
- Write meaningful commit messages
- Reference issues in commits

### 2. Branches
- Keep branches up to date with base branch
- Delete branches after merging
- Name branches descriptively

### 3. Conflict Resolution
- Resolve conflicts locally before pushing
- Ensure resolved code works correctly
- Get help when needed

## Special Considerations for pyERP

### 1. Database Migrations
- Always include migrations in the same commit as model changes
- Test migrations in both directions (up/down)
- Document breaking migrations

### 2. Environment Configuration
- Never commit sensitive data (.env files)
- Use environment templates (.env.example)
- Document configuration changes

### 3. Legacy System Integration
- Clearly mark commits that affect legacy system integration
- Test thoroughly with both test and live environments (when applicable)
- Document any changes to the integration interface
