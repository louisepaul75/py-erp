# Build stage
FROM python:3.13-slim AS builder

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Install build dependencies with all necessary dependencies for WeasyPrint
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    python3-dev \
    default-libmysqlclient-dev \
    git \
    # Required for other packages
    pkg-config \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Update pip
RUN pip install --upgrade pip

# Copy requirements files
COPY requirements/ /app/requirements/
COPY scripts/check_dependencies.py /app/scripts/check_dependencies.py

# Run dependency scanner in non-interactive mode and update requirements if needed
COPY pyerp/ /app/pyerp/
RUN echo "Running dependency scanner..." && \
    python -c "import os; os.makedirs('scripts', exist_ok=True)" && \
    python scripts/check_dependencies.py > /app/dependency_scan.log || true

# Create a Python script to install packages with error handling
RUN echo 'import sys, subprocess, time\n\
def install_package(package):\n\
    print(f"Installing {package}...")\n\
    try:\n\
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--no-cache-dir", package])\n\
        return True\n\
    except Exception as e:\n\
        print(f"Error installing {package}: {e}")\n\
        return False\n\
\n\
def install_from_file(file_path):\n\
    print(f"Installing packages from {file_path}")\n\
    success = True\n\
    try:\n\
        # First try to install all at once\n\
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--no-cache-dir", "-r", file_path])\n\
        print(f"Successfully installed all packages from {file_path}")\n\
    except Exception as e:\n\
        print(f"Failed to install all packages at once: {e}")\n\
        # If that fails, try one by one\n\
        print("Trying to install packages individually...")\n\
        with open(file_path, "r") as f:\n\
            for line in f:\n\
                line = line.strip()\n\
                if line and not line.startswith("#") and not line.startswith("-r"):\n\
                    success = install_package(line) and success\n\
                    # Add a small delay to avoid overwhelming the system\n\
                    time.sleep(0.1)\n\
    return success\n\
\n\
# Main program\n\
if __name__ == "__main__":\n\
    if len(sys.argv) < 2:\n\
        print("Usage: python install_packages.py <requirements_file>")\n\
        sys.exit(1)\n\
    \n\
    success = install_from_file(sys.argv[1])\n\
    sys.exit(0 if success else 1)\n' > /app/install_packages.py

# Install requirements using the Python script
RUN echo "Installing base requirements..." && \
    python /app/install_packages.py requirements/base.in

RUN echo "Installing production requirements..." && \
    python /app/install_packages.py requirements/production.in

# Install additional packages individually to ensure they're installed properly
RUN pip install --no-cache-dir celery redis django-celery-results django-celery-beat
RUN pip install --no-cache-dir python-json-logger structlog
RUN pip install --no-cache-dir django-filter
RUN pip install --no-cache-dir "django-cors-headers>=4.3.1,<4.4.0"
RUN pip install --no-cache-dir "drf-yasg>=1.21.7,<1.22.0"
RUN pip install --no-cache-dir "djangorestframework-simplejwt>=5.3.0,<5.4.0"
RUN pip install --no-cache-dir "mysqlclient>=2.2.0,<2.3.0" "pymysql>=1.1.0,<1.2.0"

# Verify critical packages are installed
RUN pip install --no-cache-dir "django-redis>=5.4.0,<5.5.0" "redis>=5.0.0,<5.1.0"

# Build wheels for faster installation in the final image
RUN echo "Generating requirements.txt from installed packages..." && \
    pip freeze > requirements/production.txt && \
    echo "Building wheels..." && \
    pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements/production.txt

# Final stage
FROM python:3.13-slim

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DJANGO_SETTINGS_MODULE=pyerp.settings.production

# Create non-root user
RUN useradd -m appuser

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    default-libmysqlclient-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy wheels from builder
COPY --from=builder /app/wheels /wheels
RUN pip install --no-cache /wheels/*

# Create necessary directories with proper permissions
RUN mkdir -p /app/static /app/media /app/logs \
    && chown -R appuser:appuser /app

# Setup for PyMySQL to work with Django
RUN echo 'import pymysql; pymysql.install_as_MySQLdb()' > /app/pymysql_setup.py

# Copy application code
COPY --chown=appuser:appuser . .

# Copy environment variables file
COPY --chown=appuser:appuser docker/docker.env /app/.env
COPY --chown=appuser:appuser docker/docker.local.env /app/.env.local

# Copy startup script
COPY --chown=appuser:appuser docker/start.sh /app/start.sh
RUN chmod +x /app/start.sh

# Use non-root user
USER appuser

# Run with the startup script instead of directly calling gunicorn
CMD ["/app/start.sh"] 