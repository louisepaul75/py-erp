# All-in-one Docker Image for pyERP
FROM python:3.12-slim

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        libpq-dev \
        netcat-traditional \
        supervisor \
        nginx \
        libffi-dev \
        libjpeg-dev \
        libxml2-dev \
        libxslt-dev \
        zlib1g-dev \
        libcairo2-dev \
        libpango1.0-dev \
        libgdk-pixbuf2.0-dev \
        shared-mime-info \
        libssl-dev \
        redis-server \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Upgrade pip
RUN pip install --upgrade pip

# Copy requirements files
COPY requirements/ /app/requirements/

# Install production dependencies
RUN pip install --no-cache-dir -r /app/requirements/requirements.prod.txt

# Copy frontend files first and build React
COPY frontend-react/package*.json /app/frontend-react/

# Create .npmrc to reduce warnings and optimize installation
RUN echo "legacy-peer-deps=true\nloglevel=error" > /app/frontend-react/.npmrc

WORKDIR /app/frontend-react

# Clean install dependencies using npm ci for faster, more reliable builds
RUN npm ci --prefer-offline --no-audit --no-optional

# Install Stryker packages for mutation testing
RUN npm install --save-dev \
    @stryker-mutator/core@8.7.1 \
    @stryker-mutator/jest-runner@8.7.1 \
    serve

# Copy the rest of the frontend code
COPY frontend-react/ /app/frontend-react/

# Build React frontend
RUN npm run build

# Create necessary directories
RUN mkdir -p /app/staticfiles/react

# Copy the built Next.js output and static files
RUN cp -r .next /app/staticfiles/react/
RUN cp -r public/* /app/staticfiles/react/

# Create app directory for proper routing
RUN mkdir -p /app/staticfiles/react/app

# Create a script to find the actual chunk file names
RUN echo "#!/bin/bash" > /tmp/find_chunk_files.sh && \
    echo "POLYFILLS=\$(find .next/static/chunks/ -name 'polyfills-*.js' | sed 's|.next/static/chunks/||')" >> /tmp/find_chunk_files.sh && \
    echo "WEBPACK=\$(find .next/static/chunks/ -name 'webpack-*.js' | sed 's|.next/static/chunks/||')" >> /tmp/find_chunk_files.sh && \
    echo "FRAMEWORK=\$(find .next/static/chunks/ -name 'framework-*.js' | sed 's|.next/static/chunks/||')" >> /tmp/find_chunk_files.sh && \
    echo "MAIN=\$(find .next/static/chunks/ -name 'main-*.js' | grep -v 'main-app' | sed 's|.next/static/chunks/||')" >> /tmp/find_chunk_files.sh && \
    echo "APP=\$(find .next/static/chunks/pages/ -name '_app-*.js' | sed 's|.next/static/chunks/||')" >> /tmp/find_chunk_files.sh && \
    echo "echo \$POLYFILLS \$WEBPACK \$FRAMEWORK \$MAIN \$APP" >> /tmp/find_chunk_files.sh && \
    chmod +x /tmp/find_chunk_files.sh

# Use the Next.js exported HTML file instead of manually creating it
RUN if [ -f .next/server/pages/index.html ]; then \
      cp .next/server/pages/index.html /app/staticfiles/react/app/index.html; \
    else \
      CHUNK_FILES=$(/tmp/find_chunk_files.sh) && \
      echo '<!DOCTYPE html>' > /app/staticfiles/react/app/index.html && \
      echo '<html lang="en">' >> /app/staticfiles/react/app/index.html && \
      echo '<head>' >> /app/staticfiles/react/app/index.html && \
      echo '  <meta charset="utf-8">' >> /app/staticfiles/react/app/index.html && \
      echo '  <meta name="viewport" content="width=device-width, initial-scale=1">' >> /app/staticfiles/react/app/index.html && \
      echo '  <title>pyERP Dashboard</title>' >> /app/staticfiles/react/app/index.html && \
      echo '  <link rel="icon" href="/favicon.ico" />' >> /app/staticfiles/react/app/index.html && \
      echo '</head>' >> /app/staticfiles/react/app/index.html && \
      echo '<body>' >> /app/staticfiles/react/app/index.html && \
      echo '  <div id="__next"></div>' >> /app/staticfiles/react/app/index.html && \
      for chunk in $CHUNK_FILES; do \
        echo "  <script src=\"/_next/static/chunks/$chunk\"></script>" >> /app/staticfiles/react/app/index.html; \
      done && \
      echo '</body>' >> /app/staticfiles/react/app/index.html; \
    fi

# Create root index.html that redirects to /app/
RUN echo '<!DOCTYPE html>' > /app/staticfiles/react/index.html && \
    echo '<html lang="en">' >> /app/staticfiles/react/index.html && \
    echo '<head>' >> /app/staticfiles/react/index.html && \
    echo '  <meta charset="utf-8">' >> /app/staticfiles/react/index.html && \
    echo '  <meta name="viewport" content="width=device-width, initial-scale=1">' >> /app/staticfiles/react/index.html && \
    echo '  <title>pyERP</title>' >> /app/staticfiles/react/index.html && \
    echo '  <meta http-equiv="refresh" content="0;url=/app/">' >> /app/staticfiles/react/index.html && \
    echo '</head>' >> /app/staticfiles/react/index.html && \
    echo '<body>' >> /app/staticfiles/react/index.html && \
    echo '  <p>Redirecting to <a href="/app/">application</a>...</p>' >> /app/staticfiles/react/index.html && \
    echo '</body>' >> /app/staticfiles/react/index.html && \
    echo '</html>' >> /app/staticfiles/react/index.html

# Ensure _next directory is properly structured for Nginx
RUN mkdir -p /app/staticfiles/react/app/_next && \
    cp -r /app/staticfiles/react/.next/* /app/staticfiles/react/app/_next/

# Copy the rest of the project code
WORKDIR /app
COPY . /app/

# Create directories and setup static files
RUN mkdir -p /app/staticfiles /app/pyerp/static /app/media /app/logs /app/data \
    && chmod +x /app/docker/ensure_static_dirs.sh \
    && /app/docker/ensure_static_dirs.sh \
    && chown -R root:root /app/staticfiles /app/pyerp/static /app/media /app/logs /app/data

# Set Django settings module for collectstatic
ARG DJANGO_SETTINGS_MODULE=pyerp.config.settings.production
ENV DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}

# Collect static files
RUN python manage.py collectstatic --noinput --clear

# Configure Nginx
RUN mkdir -p /etc/nginx/ssl
COPY docker/nginx/ssl/server.crt /etc/nginx/ssl/
COPY docker/nginx/ssl/server.key /etc/nginx/ssl/
COPY docker/nginx/conf.d/pyerp.conf /etc/nginx/sites-available/default
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log \
    && mkdir -p /var/log/supervisor

# Copy supervisord configuration
COPY docker/supervisord.prod.conf /etc/supervisor/conf.d/supervisord.conf

# Copy static directories setup script
COPY docker/ensure_static_dirs.sh /app/docker/ensure_static_dirs.sh
RUN chmod +x /app/docker/ensure_static_dirs.sh

# Expose ports for web services
EXPOSE 80 443 8050

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    REDIS_URL=redis://localhost:6379/0

# Set up entrypoint
COPY docker/entrypoint.prod.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
CMD ["supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
