# Create .dockerignore if it doesn't exist
FROM node:20-slim AS frontend-builder

# Set working directory for frontend
WORKDIR /frontend

# Copy package files first for better caching
COPY frontend-react/package*.json ./

# Create .npmrc to reduce warnings and optimize installation
RUN echo "legacy-peer-deps=true\nloglevel=error" > .npmrc

# Install production dependencies
RUN npm ci --prefer-offline --no-audit --no-optional --production

# Copy only the necessary files for the build
COPY frontend-react/tsconfig.json ./
COPY frontend-react/next.config.js ./
COPY frontend-react/src ./src
COPY frontend-react/public ./public

# Build React frontend
ENV NODE_ENV=production
RUN npm run build

# Start the main build
FROM python:3.12-slim

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive
ENV NODE_ENV=production

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        netcat-traditional \
        supervisor \
        nginx \
        libffi-dev \
        libjpeg-dev \
        libxml2-dev \
        libxslt-dev \
        zlib1g-dev \
        libcairo2-dev \
        libpango1.0-dev \
        libgdk-pixbuf2.0-dev \
        shared-mime-info \
        libssl-dev \
        redis-server \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Upgrade pip and install production dependencies
COPY requirements/ /app/requirements/
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r /app/requirements/requirements.prod.txt

# Copy the built frontend from the frontend-builder stage
COPY --from=frontend-builder /frontend/.next /app/frontend-react/.next
COPY --from=frontend-builder /frontend/public /app/frontend-react/public
COPY --from=frontend-builder /frontend/node_modules /app/frontend-react/node_modules
COPY --from=frontend-builder /frontend/package.json /app/frontend-react/package.json

# Create necessary directories and setup static files
RUN mkdir -p /app/staticfiles/react/app/_next && \
    cp -r /app/frontend-react/.next/* /app/staticfiles/react/app/_next/

# Copy only necessary project files
COPY pyerp/ /app/pyerp/
COPY users/ /app/users/
COPY admin_tools/ /app/admin_tools/
COPY manage.py /app/
COPY docker/ /app/docker/

# Create directories and setup static files
RUN mkdir -p /app/staticfiles /app/pyerp/static /app/media /app/logs /app/data \
    && chmod +x /app/docker/ensure_static_dirs.sh \
    && /app/docker/ensure_static_dirs.sh \
    && chown -R root:root /app/staticfiles /app/pyerp/static /app/media /app/logs /app/data

# Set Django settings module for collectstatic
# IMPORTANT: Must include 'config' in the path - pyerp.config.settings.production
ARG DJANGO_SETTINGS_MODULE=pyerp.config.settings.production
ENV DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}

# Collect static files
RUN python manage.py collectstatic --noinput --clear

# Configure Nginx
RUN mkdir -p /etc/nginx/ssl
COPY docker/nginx/ssl/server.crt /etc/nginx/ssl/
COPY docker/nginx/ssl/server.key /etc/nginx/ssl/
COPY docker/nginx/conf.d/pyerp.conf /etc/nginx/sites-available/default
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log \
    && mkdir -p /var/log/supervisor

# Copy supervisord configuration
COPY docker/supervisord.prod.conf /etc/supervisor/conf.d/supervisord.conf

# Expose ports for web services
EXPOSE 80 443 8050

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    REDIS_URL=redis://localhost:6379/0 \
    IS_DOCKER=True

# Set up entrypoint
COPY docker/entrypoint.prod.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
CMD ["supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
