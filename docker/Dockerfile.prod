# Build stage
FROM python:3.13-slim AS builder

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Install build dependencies with all necessary dependencies for WeasyPrint
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    python3-dev \
    default-libmysqlclient-dev \
    git \
    # Required for other packages
    pkg-config \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Update pip
RUN pip install --upgrade pip

# Copy requirements files
COPY requirements/ /app/requirements/
COPY scripts/check_dependencies.py /app/scripts/check_dependencies.py

# Run dependency scanner in non-interactive mode and update requirements if needed
COPY pyerp/ /app/pyerp/
RUN echo "Running dependency scanner..." && \
    python -c "import os; os.makedirs('scripts', exist_ok=True)" && \
    python scripts/check_dependencies.py > /app/dependency_scan.log || true

# Install critical and commonly used packages first
RUN pip install --no-cache-dir django django-filter djangorestframework celery redis

# Install base Django packages (add packages one at a time to avoid dependency issues)
RUN pip install --no-cache-dir "django-redis>=5.4.0,<5.5.0"
RUN pip install --no-cache-dir "redis>=5.0.0,<5.1.0"
RUN pip install --no-cache-dir "django-cors-headers>=4.3.1,<4.4.0"
RUN pip install --no-cache-dir "drf-yasg>=1.21.7,<1.22.0"
RUN pip install --no-cache-dir "djangorestframework-simplejwt>=5.3.0,<5.4.0"
RUN pip install --no-cache-dir "mysqlclient>=2.2.0,<2.3.0" "pymysql>=1.1.0,<1.2.0"

# Install Celery and related packages
RUN pip install --no-cache-dir django-celery-results django-celery-beat

# Install logging packages
RUN pip install --no-cache-dir python-json-logger structlog

# Install additional base packages
RUN pip install --no-cache-dir django-environ Pillow WeasyPrint

# Install additional production packages
RUN pip install --no-cache-dir gunicorn sentry-sdk whitenoise

# Build wheels for faster installation in the final image
RUN echo "Generating requirements.txt from installed packages..." && \
    pip freeze > requirements/production.txt && \
    echo "Building wheels..." && \
    pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements/production.txt

# Final stage
FROM python:3.13-slim

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DJANGO_SETTINGS_MODULE=pyerp.settings.production

# Create non-root user
RUN useradd -m appuser

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    default-libmysqlclient-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy wheels from builder
COPY --from=builder /app/wheels /wheels
RUN pip install --no-cache /wheels/*

# Create necessary directories with proper permissions
RUN mkdir -p /app/static /app/media /app/logs \
    && chown -R appuser:appuser /app

# Setup for PyMySQL to work with Django
RUN echo 'import pymysql; pymysql.install_as_MySQLdb()' > /app/pymysql_setup.py

# Copy application code
COPY --chown=appuser:appuser . .

# Copy environment variables file
COPY --chown=appuser:appuser docker/docker.env /app/.env
COPY --chown=appuser:appuser docker/docker.local.env /app/.env.local

# Copy startup script
COPY --chown=appuser:appuser docker/start.sh /app/start.sh
RUN chmod +x /app/start.sh

# Use non-root user
USER appuser

# Run with the startup script instead of directly calling gunicorn
CMD ["/app/start.sh"] 