FROM python:3.12-slim

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        libpq-dev \
        netcat-traditional \
        supervisor \
        nginx \
        libffi-dev \
        libjpeg-dev \
        libxml2-dev \
        libxslt-dev \
        zlib1g-dev \
        libcairo2-dev \
        libpango1.0-dev \
        libgdk-pixbuf2.0-dev \
        shared-mime-info \
        libssl-dev \
        postgresql-client \
        redis-server \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g npm@latest \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Verify executable paths
RUN which nginx || (echo "nginx not found in PATH"; exit 1) && ls -l $(which nginx)
RUN which node || (echo "node not found in PATH"; exit 1) && ls -l $(which node) && node -v && npm -v

# Set working directory
WORKDIR /app

# Upgrade pip
RUN pip install --upgrade pip

# Copy requirements files
COPY requirements/ /app/requirements/

# Install development dependencies
RUN pip install --no-cache-dir -r /app/requirements/requirements.dev.txt

# Copy setup.py and install pyerp in development mode
COPY setup.py /app/
RUN pip install -e /app

# Copy Filebeat config early for later use
COPY docker/filebeat_config.yml /tmp/filebeat_config.yml

# Create directories for static, media, logs, and data files
RUN mkdir -p /app/static /app/media /app/logs /app/data \
    && mkdir -p /var/log/supervisor \
    && mkdir -p /var/run \
    && mkdir -p /etc/supervisor/conf.d \
    && mkdir -p /etc/filebeat \
    && chown -R root:root /var/log/supervisor \
    && chown -R root:root /var/run \
    && chmod -R 755 /app/logs

# Set up React frontend dependencies with proper caching
WORKDIR /app/frontend-react

# Copy package files first for better layer caching
COPY frontend-react/package*.json ./

# Install frontend dependencies with proper handling of deprecated packages
RUN npm install --legacy-peer-deps && \
    npm install --save-dev autoprefixer postcss tailwindcss && \
    npm install --save-dev jest @testing-library/react @testing-library/jest-dom @testing-library/user-event jest-environment-jsdom @babel/preset-env @babel/preset-react @babel/preset-typescript jest-transform-stub identity-obj-proxy ts-jest jest-junit && \
    npm update

# --- Install and Configure Filebeat --- #
RUN ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "arm64" ]; then \
        FILEBEAT_ARCH="arm64"; \
    else \
        FILEBEAT_ARCH="amd64"; \
    fi && \
    curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.17.0-${FILEBEAT_ARCH}.deb && \
    dpkg -i filebeat-7.17.0-${FILEBEAT_ARCH}.deb && \
    rm filebeat-7.17.0-${FILEBEAT_ARCH}.deb && \
    # Copy filebeat config from temporary location
    cp /tmp/filebeat_config.yml /etc/filebeat/filebeat.yml && \
    # Set correct permissions
    chown root:root /etc/filebeat/filebeat.yml && \
    chmod go-w /etc/filebeat/filebeat.yml && \
    # Create data directory for filebeat registry
    mkdir -p /var/lib/filebeat && \
    chown root:root /var/lib/filebeat && \
    chmod go-w /var/lib/filebeat
# --- End Filebeat --- #

# Copy React frontend source files
COPY frontend-react/ ./

WORKDIR /app

# Expose ports for Django and React
EXPOSE 8000 6379 3000 

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    # Ensure this path is correct for settings. Must include 'config' in the path!
    DJANGO_SETTINGS_MODULE=pyerp.config.settings.development \
    PYTHONPATH=/app

# Copy supervisord configuration
COPY docker/supervisord.dev.conf /etc/supervisor/conf.d/supervisord.conf

# Copy static directories setup script
COPY docker/ensure_static_dirs.sh /app/docker/ensure_static_dirs.sh
RUN chmod +x /app/docker/ensure_static_dirs.sh

# Set up frontend dependencies script
COPY docker/ensure_frontend_deps.sh /app/docker/ensure_frontend_deps.sh
RUN chmod +x /app/docker/ensure_frontend_deps.sh

# Set up entrypoint
COPY docker/entrypoint.dev.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Copy Nginx configuration
# COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
# COPY docker/nginx/conf.d/*.conf /etc/nginx/conf.d/
COPY docker/nginx/conf.d/pyerp.dev.conf /etc/nginx/conf.d/pyerp.conf

# Ensure SSL directory exists if needed by config, though certs aren't generated here
# RUN mkdir -p /etc/nginx/ssl

# Remove default Nginx site config if it exists
RUN rm -f /etc/nginx/sites-enabled/default

ENTRYPOINT ["/entrypoint.sh"]
