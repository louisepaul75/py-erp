[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[unix_http_server]
file=/var/run/supervisor.sock   ; path to your socket file
chmod=0700                 ; socket file mode (default 0700)

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket

[program:gunicorn]
# Conditionally enable tracemalloc based on ENABLE_MEMORY_PROFILING env var
command=/bin/bash -c 'if [ "$ENABLE_MEMORY_PROFILING" = "true" ]; then echo "Gunicorn: Enabling tracemalloc"; exec python -X tracemalloc /usr/local/bin/gunicorn pyerp.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 4; else echo "Gunicorn: Running without tracemalloc"; exec python /usr/local/bin/gunicorn pyerp.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 4; fi'
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
priority=100 # Lower priority than nextjs

[program:nginx]
# Use wrapper script to wait for Next.js before starting Nginx
command=/app/docker/wait-for-nextjs.sh
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:redis]
command=/usr/bin/redis-server
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:nextjs]
# Run the standalone server.js, explicitly bind to IPv4 loopback (-H 127.0.0.1) and specific port (-p 3000)
command=node server.js -H 0.0.0.0 -p 3000
directory=/app/frontend-react
user=root
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
startsecs=5 # Wait 5 seconds after start before considering it RUNNING
environment=NODE_ENV="production",NEXT_TELEMETRY_DISABLED="1"
priority=99 # Higher priority than nginx

[program:celery]
# Conditionally enable tracemalloc based on ENABLE_MEMORY_PROFILING env var
command=/bin/bash -c 'if [ "$ENABLE_MEMORY_PROFILING" = "true" ]; then echo "Celery Worker: Enabling tracemalloc"; exec python -X tracemalloc -m celery -A pyerp.celery worker -l INFO; else echo "Celery Worker: Running without tracemalloc"; exec python -m celery -A pyerp.celery worker -l INFO; fi'
directory=/app
autostart=true
autorestart=true
startretries=3
stopwaitsecs=10
stderr_logfile=/app/logs/celery-err.log
stdout_logfile=/app/logs/celery-out.log
priority=20
environment=DJANGO_SETTINGS_MODULE="pyerp.config.settings.production",C_FORCE_ROOT="true"

[program:celery-beat]
# Conditionally enable tracemalloc based on ENABLE_MEMORY_PROFILING env var
command=/bin/bash -c 'if [ "$ENABLE_MEMORY_PROFILING" = "true" ]; then echo "Celery Beat: Enabling tracemalloc"; exec python -X tracemalloc -m celery -A pyerp.celery beat -l INFO; else echo "Celery Beat: Running without tracemalloc"; exec python -m celery -A pyerp.celery beat -l INFO; fi'
directory=/app
autostart=true
autorestart=true
startretries=3
stopwaitsecs=10
stderr_logfile=/app/logs/celery-beat-err.log
stdout_logfile=/app/logs/celery-beat-out.log
priority=25
environment=DJANGO_SETTINGS_MODULE="pyerp.config.settings.production",C_FORCE_ROOT="true"

# ELK stack services removed - now running in separate container
