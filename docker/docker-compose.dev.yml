# WARNING: NEVER ADD CREDENTIALS DIRECTLY TO THIS FILE
# All sensitive information should be stored in the environment files in config/env directory
# This file should be safe to commit to version control

version: '3.8'

services:
  pyerp-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    container_name: pyerp-dev
    ports:
      - "8000:8000"
      - "3000:3000"
      - "80:80"
      - "6379:6379"
    volumes:
      - ..:/app
      - node_modules_volume:/app/frontend-react/node_modules
      - filebeat_data:/var/lib/filebeat
    environment:
      - DJANGO_SETTINGS_MODULE=pyerp.config.settings.development
      - PYERP_ENV=development
      - ELASTICSEARCH_HOST=pyerp-elastic-kibana
      - ELASTICSEARCH_PORT=9200
      - KIBANA_HOST=pyerp-elastic-kibana
      - KIBANA_PORT=5601
      - REDIS_HOST=localhost
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      bash -c "
        cd /app &&
        # Ensure Redis data directory exists and has correct permissions
        mkdir -p /var/lib/redis &&
        chown redis:redis /var/lib/redis &&
        chmod 750 /var/lib/redis &&
        # Run the static directories setup script
        bash /app/docker/ensure_static_dirs.sh &&
        # Run the frontend dependencies setup script
        echo 'Ensuring frontend dependencies are installed...' &&
        if [ -f /app/docker/ensure_frontend_deps.sh ]; then 
          chmod +x /app/docker/ensure_frontend_deps.sh && bash /app/docker/ensure_frontend_deps.sh ;
        else 
          echo 'Warning: /app/docker/ensure_frontend_deps.sh not found.' ;
        fi &&
        # Configure Filebeat to ship logs to monitoring container
        echo 'Configuring Filebeat to ship logs to monitoring container...' &&
        if [ -f /usr/bin/filebeat ]; then
          # Remove any existing filebeat lock file
          rm -f /var/lib/filebeat/filebeat.lock &&
          # Ensure filebeat config has correct Elasticsearch host
          sed -i 's/\${ELASTICSEARCH_HOST}/pyerp-elastic-kibana/g' /etc/filebeat/filebeat.yml &&
          sed -i 's/\${KIBANA_HOST}/pyerp-elastic-kibana/g' /etc/filebeat/filebeat.yml &&
          # Start Filebeat in the background
          /usr/bin/filebeat -e -c /etc/filebeat/filebeat.yml > /app/logs/filebeat.log 2>&1 &
          echo 'Filebeat started successfully.'
        else
          echo 'Filebeat not installed. Installing now...' &&
          apt-get update &&
          apt-get install -y filebeat &&
          # Copy the filebeat config
          cp /app/docker/filebeat_config.yml /etc/filebeat/filebeat.yml &&
          # Set correct permissions
          chown root:root /etc/filebeat/filebeat.yml &&
          chmod go-w /etc/filebeat/filebeat.yml &&
          # Update config with correct hosts
          sed -i 's/\${ELASTICSEARCH_HOST}/pyerp-elastic-kibana/g' /etc/filebeat/filebeat.yml &&
          sed -i 's/\${KIBANA_HOST}/pyerp-elastic-kibana/g' /etc/filebeat/filebeat.yml &&
          # Remove any existing filebeat lock file
          rm -f /var/lib/filebeat/filebeat.lock &&
          # Start Filebeat in the background
          /usr/bin/filebeat -e -c /etc/filebeat/filebeat.yml > /app/logs/filebeat.log 2>&1 &
          echo 'Filebeat installed and started successfully.'
        fi &&
        # Start supervisord
        /usr/bin/supervisord -n -c /etc/supervisor/conf.d/supervisord.conf
      "
    networks:
      - pyerp-network
    depends_on:
      - pyerp-elastic-kibana

  pyerp-elastic-kibana:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: pyerp-elastic-kibana
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=true
    ports:
      - "9200:9200"
      - "9300:9300"
      - "5602:5601"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    command: >
      /bin/bash -c "
        # Start Elasticsearch
        su -c '/usr/local/bin/docker-entrypoint.sh eswrapper' elasticsearch &
        ES_PID=$!
        
        # Wait for Elasticsearch to be ready
        until curl -s http://localhost:9200 > /dev/null; do
          echo 'Waiting for Elasticsearch...'
          sleep 5
        done
        
        # Install Kibana
        if [ ! -d /usr/share/kibana ]; then
          echo 'Installing Kibana...'
          apt-get update && apt-get install -y wget gnupg
          wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
          echo 'deb https://artifacts.elastic.co/packages/7.x/apt stable main' > /etc/apt/sources.list.d/elastic-7.x.list
          apt-get update && apt-get install -y kibana=7.17.0
        fi
        
        # Configure Kibana
        echo 'server.host: \"0.0.0.0\"' > /etc/kibana/kibana.yml
        echo 'elasticsearch.hosts: [\"http://localhost:9200\"]' >> /etc/kibana/kibana.yml
        
        # Start Kibana
        su -c '/usr/share/kibana/bin/kibana --allow-root' kibana &
        KIBANA_PID=$!
        
        # Create initial index templates
        curl -X PUT 'http://localhost:9200/_template/pyerp-logs' -H 'Content-Type: application/json' -d '{
          \"index_patterns\": [\"pyerp-*\"],
          \"settings\": {
            \"number_of_shards\": 1,
            \"number_of_replicas\": 0
          },
          \"mappings\": {
            \"properties\": {
              \"@timestamp\": { \"type\": \"date\" },
              \"message\": { \"type\": \"text\" },
              \"level\": { \"type\": \"keyword\" },
              \"name\": { \"type\": \"keyword\" }
            }
          }
        }'
        
        # Wait for process termination
        wait $ES_PID
        wait $KIBANA_PID
      "
    networks:
      - pyerp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5

  zebra-day:
    build:
      context: ..
      dockerfile: docker/Dockerfile.zebra_day
    container_name: zebra-day-dev
    ports:
      - "8118:8118" # Map host port 8118 to container port 8118 for UI/API access
    # environment:
      # Optional: Override startup options if needed, e.g., remove --no-probe
      # - ZDAY_START_OPTS=""
    networks:
      - pyerp-network
    restart: unless-stopped # Optional: Restart the service if it stops unexpectedly

volumes:
  pyerp_data:
  filebeat_data:
  es_data:
  node_modules_volume: {}

networks:
  pyerp-network:
    driver: bridge
