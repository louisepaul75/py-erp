# Minimal Dockerfile - fallback option if the main one still fails
FROM python:3.13-slim

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DJANGO_SETTINGS_MODULE=pyerp.settings.production

WORKDIR /app

# Install only essential build dependencies with better error handling
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    python3-dev \
    default-libmysqlclient-dev \
    pkg-config \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install directly with proper error output
COPY requirements/minimal.in /app/requirements/minimal.in

# Alternative: Use PyMySQL which is pure Python (no compilation needed)
RUN pip install --upgrade pip && \
    # Install pure Python MySQL client as fallback
    pip install "PyMySQL>=1.1.0" && \
    # Core packages
    pip install "Django>=5.1.0,<5.2.0" "djangorestframework>=3.14.0,<3.15.0" "django-filter>=23.5,<24.0" && \
    # CORS headers package
    pip install "django-cors-headers>=4.3.1,<4.4.0" && \
    # Server and environment
    pip install "gunicorn>=21.2.0,<21.3.0" "whitenoise>=6.6.0,<6.7.0" && \
    pip install "python-dotenv>=1.0.0,<1.1.0" "dj-database-url>=2.1.0,<2.2.0" && \
    # Logging packages
    pip install "python-json-logger>=2.0.7,<2.1.0" "structlog>=24.1.0,<24.2.0" && \
    # Celery stack
    pip install "celery>=5.3.6,<5.4.0" "redis>=5.0.0,<5.1.0" && \
    pip install "django-celery-results>=2.5.0,<2.6.0" "django-celery-beat>=2.7.0,<2.8.0"

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/static /app/media /app/logs

# Copy environment variables file - can be overridden at runtime with -v
COPY docker/docker.env /app/.env
COPY docker/docker.local.env /app/.env.local

# Setup for PyMySQL to work with Django
RUN echo 'import pymysql; pymysql.install_as_MySQLdb()' > /app/pymysql_setup.py

# Copy startup script and modify to include PyMySQL setup
COPY docker/start.sh /app/start.sh
RUN sed -i '2i # Load PyMySQL as MySQLdb\npython /app/pymysql_setup.py' /app/start.sh

# Run as non-root user
RUN useradd -m appuser && \
    chown -R appuser:appuser /app && \
    chmod +x /app/start.sh
USER appuser

# Run with the startup script instead of directly calling gunicorn
CMD ["/app/start.sh"] 