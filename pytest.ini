[pytest]
# Test Categories
testpaths = . pyerp
python_files = 
    test_*.py
    *_test.py
python_classes = Test*
python_functions = test_*

# Test Collection
norecursedirs = 
    .git 
    .tox 
    .eggs 
    .env 
    venv 
    build 
    dist 
    htmlcov 
    __pycache__

# Markers for test categories
markers =
    ui: User interface tests
    backend: Backend service tests
    database: Database tests
    api: API tests
    core: Core business logic tests
    unit: Unit tests for individual components
    property: Property-based tests using Hypothesis
    fuzzing: Fuzzing tests

# Test Running
addopts = 
    --strict-markers
    --tb=short
    --color=yes
    -v
    --reuse-db

# Environment
DJANGO_SETTINGS_MODULE = pyerp.config.settings.test
python_paths = .
filterwarnings =
    ignore::DeprecationWarning
    ignore::UserWarning
env =
    DJANGO_SETTINGS_MODULE=pyerp.config.settings.test
    PYTHONPATH=.
    PYTEST_RUNNING=1

# Hypothesis settings
# These can be overridden in specific tests using @settings
hypothesis-max-examples = 100
hypothesis-deadline = 1000
hypothesis-report-multiple-bugs = True
hypothesis-derandomize = False
hypothesis-verbosity = normal

# Coverage settings
[coverage:run]
source = 
    pyerp
    scripts
branch = True
omit = 
    */migrations/*
    */tests/*
    */settings/*
    */wsgi.py
    */asgi.py
    manage.py
    */__pycache__/*
    */venv/*
    */node_modules/*
    */static/*
    */staticfiles/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    @abc.abstractmethod
fail_under = 60

[coverage:html]
directory = htmlcov 