# Generated by Django 5.1.7 on 2025-03-13 22:24

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="EmailLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "message_id",
                    models.CharField(
                        help_text="Unique identifier for the email message",
                        max_length=255,
                        unique=True,
                        verbose_name="Message ID",
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        help_text="Email subject",
                        max_length=255,
                        verbose_name="Subject",
                    ),
                ),
                (
                    "from_email",
                    models.EmailField(
                        help_text="Sender email address",
                        max_length=254,
                        verbose_name="From Email",
                    ),
                ),
                (
                    "to_email",
                    models.TextField(
                        help_text="Recipient email address(es), comma separated",
                        verbose_name="To Email",
                    ),
                ),
                (
                    "cc_email",
                    models.TextField(
                        blank=True,
                        help_text="CC email address(es), comma separated",
                        null=True,
                        verbose_name="CC Email",
                    ),
                ),
                (
                    "bcc_email",
                    models.TextField(
                        blank=True,
                        help_text="BCC email address(es), comma separated",
                        null=True,
                        verbose_name="BCC Email",
                    ),
                ),
                (
                    "body_text",
                    models.TextField(
                        blank=True,
                        help_text="Plain text content of the email",
                        null=True,
                        verbose_name="Body Text",
                    ),
                ),
                (
                    "body_html",
                    models.TextField(
                        blank=True,
                        help_text="HTML content of the email",
                        null=True,
                        verbose_name="Body HTML",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("queued", "Queued"),
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("opened", "Opened"),
                            ("clicked", "Clicked"),
                            ("bounced", "Bounced"),
                            ("rejected", "Rejected"),
                            ("complained", "Complained"),
                            ("unsubscribed", "Unsubscribed"),
                            ("failed", "Failed"),
                        ],
                        default="queued",
                        help_text="Current status of the email",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if the email failed to send",
                        null=True,
                        verbose_name="Error Message",
                    ),
                ),
                (
                    "esp",
                    models.CharField(
                        blank=True,
                        help_text="Email Service Provider used to send this email",
                        max_length=50,
                        null=True,
                        verbose_name="ESP",
                    ),
                ),
                (
                    "esp_message_id",
                    models.CharField(
                        blank=True,
                        help_text="Message ID assigned by the ESP",
                        max_length=255,
                        null=True,
                        verbose_name="ESP Message ID",
                    ),
                ),
                (
                    "opens",
                    models.IntegerField(
                        default=0,
                        help_text="Number of times the email was opened",
                        verbose_name="Opens",
                    ),
                ),
                (
                    "clicks",
                    models.IntegerField(
                        default=0,
                        help_text="Number of times links in the email were clicked",
                        verbose_name="Clicks",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the email was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the email status was last updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "sent_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the email was sent",
                        null=True,
                        verbose_name="Sent At",
                    ),
                ),
                (
                    "delivered_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the email was delivered",
                        null=True,
                        verbose_name="Delivered At",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Log",
                "verbose_name_plural": "Email Logs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["message_id"], name="email_syste_message_0b65e4_idx"
                    ),
                    models.Index(
                        fields=["status"], name="email_syste_status_7ce863_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="email_syste_created_feff97_idx"
                    ),
                    models.Index(
                        fields=["from_email"], name="email_syste_from_em_84c562_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="EmailEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        help_text="Type of email event (e.g., open, click, bounce)",
                        max_length=50,
                        verbose_name="Event Type",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the event occurred",
                        verbose_name="Timestamp",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True,
                        help_text="Additional data related to the event",
                        null=True,
                        verbose_name="Event Data",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="User agent of the client that triggered the event",
                        null=True,
                        verbose_name="User Agent",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of the client that triggered the event",
                        null=True,
                        verbose_name="IP Address",
                    ),
                ),
                (
                    "email_log",
                    models.ForeignKey(
                        help_text="The email this event is related to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="email_system.emaillog",
                        verbose_name="Email Log",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Event",
                "verbose_name_plural": "Email Events",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["event_type"], name="email_syste_event_t_1e4005_idx"
                    ),
                    models.Index(
                        fields=["timestamp"], name="email_syste_timesta_332938_idx"
                    ),
                ],
            },
        ),
    ]
