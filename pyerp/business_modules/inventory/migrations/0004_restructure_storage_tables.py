# Generated by Django 5.1.7 on 2025-03-15 15:50

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("inventory", "0003_alter_productstorage_unique_together"),
        ("products", "0001_initial"),
    ]

    operations = [
        # Drop the existing ProductStorage table
        migrations.RunSQL(
            "DROP TABLE IF EXISTS inventory_productstorage CASCADE;",
            reverse_sql="""
            CREATE TABLE inventory_productstorage (
                id bigint NOT NULL,
                created_at timestamp with time zone NOT NULL,
                modified_at timestamp with time zone NOT NULL,
                legacy_id character varying(50),
                legacy_modified timestamp with time zone,
                is_synchronized boolean NOT NULL,
                quantity integer NOT NULL,
                reservation_status character varying(20) NOT NULL,
                reservation_reference character varying(100) NOT NULL,
                batch_number character varying(100) NOT NULL,
                position_in_slot character varying(20) NOT NULL,
                date_stored timestamp with time zone NOT NULL,
                expiry_date date,
                box_slot_id bigint NOT NULL,
                product_id bigint NOT NULL
            );
            """
        ),
        
        # Create new ProductStorage model
        migrations.CreateModel(
            name="ProductStorage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        default=0,
                        help_text="Quantity of the product in this location (maps to Bestand in legacy system)",
                    ),
                ),
                (
                    "reservation_status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Available"),
                            ("RESERVED", "Reserved"),
                            ("ALLOCATED", "Allocated"),
                            ("PICKED", "Picked"),
                        ],
                        default="AVAILABLE",
                        help_text="Current reservation status of the product",
                        max_length=20,
                    ),
                ),
                (
                    "reservation_reference",
                    models.CharField(
                        blank=True,
                        help_text="Reference for the reservation (e.g., order number)",
                        max_length=100,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Product stored in this location",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="storage_locations",
                        to="products.variantproduct",
                    ),
                ),
                (
                    "storage_location",
                    models.ForeignKey(
                        help_text="Storage location where the product is stored",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stored_products",
                        to="inventory.storagelocation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Storage",
                "verbose_name_plural": "Product Storage",
                "ordering": ["product"],
                "unique_together": {("product", "storage_location")},
            },
        ),
        
        # Create BoxStorage model
        migrations.CreateModel(
            name="BoxStorage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "position_in_slot",
                    models.CharField(
                        blank=True,
                        help_text="Position identifier within the slot (e.g., front, back, left, right)",
                        max_length=20,
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        default=0,
                        help_text="Quantity of the product in this box slot",
                    ),
                ),
                (
                    "batch_number",
                    models.CharField(
                        blank=True,
                        help_text="Batch or lot number for the product",
                        max_length=100,
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True,
                        help_text="Expiry date for the product",
                        null=True,
                    ),
                ),
                (
                    "date_stored",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the product was stored",
                    ),
                ),
                (
                    "box_slot",
                    models.ForeignKey(
                        help_text="Box slot where the product is stored",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="box_storage_items",
                        to="inventory.boxslot",
                    ),
                ),
                (
                    "product_storage",
                    models.ForeignKey(
                        help_text="Product storage record (maps to UUID_Artikel_Lagerorte in legacy system)",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="box_assignments",
                        to="inventory.productstorage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Box Storage",
                "verbose_name_plural": "Box Storage",
                "ordering": ["-date_stored"],
                "unique_together": {
                    ("box_slot", "product_storage", "batch_number", "position_in_slot")
                },
            },
        ),
        
        # Add indexes
        migrations.AddIndex(
            model_name="productstorage",
            index=models.Index(
                fields=["product"], name="inventory_p_product_801eb4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productstorage",
            index=models.Index(
                fields=["storage_location"], name="inventory_p_storage_801eb4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productstorage",
            index=models.Index(
                fields=["reservation_status"], name="inventory_p_reserva_801eb4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="boxstorage",
            index=models.Index(
                fields=["product_storage"], name="inventory_b_product_50b592_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="boxstorage",
            index=models.Index(
                fields=["box_slot"], name="inventory_b_box_slo_0c5188_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="boxstorage",
            index=models.Index(
                fields=["batch_number"], name="inventory_b_batch_n_c1550e_idx"
            ),
        ),
    ]
