# Generated by Django 5.1.7 on 2025-03-13 01:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("products", "0002_auto_20250311_0044"),
    ]

    operations = [
        migrations.CreateModel(
            name="Box",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for the box", max_length=50
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True, help_text="Barcode for the box", max_length=100
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Available"),
                            ("IN_USE", "In Use"),
                            ("RESERVED", "Reserved"),
                            ("DAMAGED", "Damaged"),
                            ("RETIRED", "Retired"),
                        ],
                        default="AVAILABLE",
                        help_text="Current status of the box",
                        max_length=20,
                    ),
                ),
                (
                    "purpose",
                    models.CharField(
                        choices=[
                            ("STORAGE", "Storage"),
                            ("PICKING", "Picking"),
                            ("TRANSPORT", "Transport"),
                            ("WORKSHOP", "Workshop"),
                        ],
                        default="STORAGE",
                        help_text="Primary purpose of this box",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about the box"
                    ),
                ),
            ],
            options={
                "verbose_name": "Box",
                "verbose_name_plural": "Boxes",
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="BoxType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the box type", max_length=100),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the box type"
                    ),
                ),
                (
                    "length",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Length of the box in cm",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "width",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Width of the box in cm",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Height of the box in cm",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "weight_capacity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum weight capacity in kg",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "slot_count",
                    models.IntegerField(
                        default=1, help_text="Number of slots in this box type"
                    ),
                ),
                (
                    "slot_naming_scheme",
                    models.CharField(
                        default="numeric",
                        help_text="Naming scheme for slots (numeric, alphabetic, etc.)",
                        max_length=50,
                    ),
                ),
            ],
            options={
                "verbose_name": "Box Type",
                "verbose_name_plural": "Box Types",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="BoxSlot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "slot_code",
                    models.CharField(
                        help_text="Code for the slot within the box", max_length=20
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True, help_text="Barcode for the slot", max_length=100
                    ),
                ),
                (
                    "occupied",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the slot is currently occupied",
                    ),
                ),
                (
                    "box",
                    models.ForeignKey(
                        help_text="Box containing this slot",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="slots",
                        to="inventory.box",
                    ),
                ),
            ],
            options={
                "verbose_name": "Box Slot",
                "verbose_name_plural": "Box Slots",
                "ordering": ["box", "slot_code"],
                "unique_together": {("box", "slot_code")},
            },
        ),
        migrations.AddField(
            model_name="box",
            name="box_type",
            field=models.ForeignKey(
                help_text="Type of box",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="boxes",
                to="inventory.boxtype",
            ),
        ),
        migrations.CreateModel(
            name="StorageLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        help_text="Country code (maps to Land_LKZ in legacy system)",
                        max_length=2,
                    ),
                ),
                (
                    "city_building",
                    models.CharField(
                        blank=True,
                        help_text="City and building (maps to Ort_Gebaeude in legacy system)",
                        max_length=100,
                    ),
                ),
                (
                    "sale",
                    models.BooleanField(
                        default=False,
                        help_text="Whether products in this location are for sale (maps to Abverkauf in legacy system)",
                    ),
                ),
                (
                    "special_spot",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a special storage spot (maps to Sonderlager in legacy system)",
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        blank=True,
                        help_text="Storage unit identifier (maps to Regal in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "compartment",
                    models.CharField(
                        blank=True,
                        help_text="Compartment within unit (maps to Fach in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "shelf",
                    models.CharField(
                        blank=True,
                        help_text="Shelf identifier (maps to Boden in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "location_code",
                    models.CharField(
                        blank=True,
                        help_text="Formatted location code (maps to Lagerort in legacy system)",
                        max_length=100,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for the storage location",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the storage location",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this storage location is currently active",
                    ),
                ),
                (
                    "capacity",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum capacity of the storage location (number of boxes)",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Storage Location",
                "verbose_name_plural": "Storage Locations",
                "ordering": [
                    "country",
                    "city_building",
                    "unit",
                    "compartment",
                    "shelf",
                ],
                "indexes": [
                    models.Index(
                        fields=["legacy_id"], name="inventory_s_legacy__b44a1d_idx"
                    ),
                    models.Index(
                        fields=["country", "city_building"],
                        name="inventory_s_country_8f2fb6_idx",
                    ),
                    models.Index(
                        fields=["unit", "compartment", "shelf"],
                        name="inventory_s_unit_59b9c9_idx",
                    ),
                ],
                "unique_together": {
                    ("country", "city_building", "unit", "compartment", "shelf")
                },
            },
        ),
        migrations.AddField(
            model_name="box",
            name="storage_location",
            field=models.ForeignKey(
                help_text="Storage location where the box is placed",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="boxes",
                to="inventory.storagelocation",
            ),
        ),
        migrations.CreateModel(
            name="InventoryMovement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(help_text="Quantity of the product moved"),
                ),
                (
                    "movement_type",
                    models.CharField(
                        choices=[
                            ("RECEIPT", "Receipt"),
                            ("TRANSFER", "Transfer"),
                            ("PICK", "Pick"),
                            ("RETURN", "Return"),
                            ("ADJUSTMENT", "Adjustment"),
                            ("DISPOSAL", "Disposal"),
                        ],
                        help_text="Type of movement",
                        max_length=20,
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True,
                        help_text="Reference for the movement (e.g., order number)",
                        max_length=100,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about the movement"
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Date and time of the movement"
                    ),
                ),
                (
                    "from_slot",
                    models.ForeignKey(
                        blank=True,
                        help_text="Box slot the product is moved from",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="outgoing_movements",
                        to="inventory.boxslot",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Product being moved",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="inventory_movements",
                        to="products.variantproduct",
                    ),
                ),
                (
                    "to_slot",
                    models.ForeignKey(
                        blank=True,
                        help_text="Box slot the product is moved to",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="incoming_movements",
                        to="inventory.boxslot",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inventory Movement",
                "verbose_name_plural": "Inventory Movements",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["product"], name="inventory_i_product_2153f2_idx"
                    ),
                    models.Index(
                        fields=["movement_type"], name="inventory_i_movemen_e5f549_idx"
                    ),
                    models.Index(
                        fields=["timestamp"], name="inventory_i_timesta_1796ae_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ProductStorage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        default=1, help_text="Quantity of the product in this location"
                    ),
                ),
                (
                    "reservation_status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Available"),
                            ("RESERVED", "Reserved"),
                            ("ALLOCATED", "Allocated"),
                            ("PICKED", "Picked"),
                        ],
                        default="AVAILABLE",
                        help_text="Current reservation status of the product",
                        max_length=20,
                    ),
                ),
                (
                    "reservation_reference",
                    models.CharField(
                        blank=True,
                        help_text="Reference for the reservation (e.g., order number)",
                        max_length=100,
                    ),
                ),
                (
                    "batch_number",
                    models.CharField(
                        blank=True,
                        help_text="Batch or lot number for the product",
                        max_length=100,
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True, help_text="Expiry date for the product", null=True
                    ),
                ),
                (
                    "date_stored",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the product was stored",
                    ),
                ),
                (
                    "box_slot",
                    models.ForeignKey(
                        help_text="Box slot where the product is stored",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stored_products",
                        to="inventory.boxslot",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Product stored in this location",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="storage_locations",
                        to="products.variantproduct",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Storage",
                "verbose_name_plural": "Product Storage",
                "ordering": ["-date_stored"],
                "indexes": [
                    models.Index(
                        fields=["product"], name="inventory_p_product_103f35_idx"
                    ),
                    models.Index(
                        fields=["reservation_status"],
                        name="inventory_p_reserva_11387a_idx",
                    ),
                    models.Index(
                        fields=["batch_number"], name="inventory_p_batch_n_3dee34_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="box",
            index=models.Index(fields=["code"], name="inventory_b_code_0d4e47_idx"),
        ),
        migrations.AddIndex(
            model_name="box",
            index=models.Index(fields=["status"], name="inventory_b_status_dd318d_idx"),
        ),
    ]
