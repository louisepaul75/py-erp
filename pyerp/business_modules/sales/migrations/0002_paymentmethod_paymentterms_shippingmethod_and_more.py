# Generated by Django 5.1.7 on 2025-03-16 11:34

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("products", "0001_initial"),
        ("sales", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("code", models.CharField(max_length=20)),
                ("active", models.BooleanField(default=True)),
                ("requires_authorization", models.BooleanField(default=False)),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Payment Method",
                "verbose_name_plural": "Payment Methods",
                "unique_together": {("name", "code")},
            },
        ),
        migrations.CreateModel(
            name="PaymentTerms",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("days_due", models.IntegerField()),
                ("discount_days", models.IntegerField(default=0)),
                (
                    "discount_percent",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Payment Terms",
                "verbose_name_plural": "Payment Terms",
                "unique_together": {("days_due", "discount_days", "discount_percent")},
            },
        ),
        migrations.CreateModel(
            name="ShippingMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("code", models.CharField(max_length=20)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "default_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Shipping Method",
                "verbose_name_plural": "Shipping Methods",
                "unique_together": {("name", "code")},
            },
        ),
        migrations.CreateModel(
            name="SalesRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "record_number",
                    models.CharField(
                        help_text="Document number (maps to PapierNr in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "record_date",
                    models.DateField(
                        help_text="Document date (maps to Datum in legacy system)"
                    ),
                ),
                (
                    "record_type",
                    models.CharField(
                        choices=[
                            ("INVOICE", "Invoice"),
                            ("PROPOSAL", "Proposal"),
                            ("DELIVERY_NOTE", "Delivery Note"),
                            ("CREDIT_NOTE", "Credit Note"),
                            ("ORDER_CONFIRMATION", "Order Confirmation"),
                        ],
                        default="INVOICE",
                        help_text="Type of document (maps to Papierart in legacy system)",
                        max_length=20,
                    ),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Subtotal amount before tax (maps to Netto in legacy system)",
                        max_digits=12,
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Tax amount (maps to MWST_EUR in legacy system)",
                        max_digits=12,
                    ),
                ),
                (
                    "shipping_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Shipping cost (maps to Frachtkosten in legacy system)",
                        max_digits=10,
                    ),
                ),
                (
                    "handling_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Handling fee (maps to Bearbeitungskos in legacy system)",
                        max_digits=10,
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Total amount including tax (maps to Endbetrag in legacy system)",
                        max_digits=12,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PAID", "Paid"),
                            ("OVERDUE", "Overdue"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        help_text="Payment status (derived from bezahlt in legacy system)",
                        max_length=20,
                    ),
                ),
                (
                    "payment_date",
                    models.DateField(
                        blank=True,
                        help_text="Date of payment (maps to ZahlungsDat in legacy system)",
                        null=True,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="EUR",
                        help_text="Currency code (maps to Währung in legacy system)",
                        max_length=3,
                    ),
                ),
                (
                    "tax_type",
                    models.CharField(
                        blank=True,
                        help_text="Tax type (maps to MWSt_Art in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes (maps to Text in legacy system)"
                    ),
                ),
                (
                    "billing_address",
                    models.ForeignKey(
                        help_text="Billing address (maps to Rech_Adr in legacy system)",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="billing_records",
                        to="sales.address",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Customer associated with this record",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sales_records",
                        to="sales.customer",
                    ),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        blank=True,
                        help_text="Payment method for this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sales_records",
                        to="sales.paymentmethod",
                    ),
                ),
                (
                    "payment_terms",
                    models.ForeignKey(
                        blank=True,
                        help_text="Payment terms for this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sales_records",
                        to="sales.paymentterms",
                    ),
                ),
                (
                    "shipping_address",
                    models.ForeignKey(
                        help_text="Shipping address (maps to Lief_Adr in legacy system)",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="shipping_records",
                        to="sales.address",
                    ),
                ),
                (
                    "shipping_method",
                    models.ForeignKey(
                        blank=True,
                        help_text="Shipping method for this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sales_records",
                        to="sales.shippingmethod",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sales Record",
                "verbose_name_plural": "Sales Records",
            },
        ),
        migrations.CreateModel(
            name="SalesRecordItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "position",
                    models.IntegerField(
                        help_text="Position in the sales record (maps to PosNr in legacy system)"
                    ),
                ),
                (
                    "product_code",
                    models.CharField(
                        blank=True,
                        help_text="Product code (maps to ArtNr in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Item description (maps to Bezeichnung in legacy system)"
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Quantity (maps to Menge in legacy system)",
                        max_digits=10,
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Unit price (maps to Preis in legacy system)",
                        max_digits=12,
                    ),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Discount percentage (maps to Rabatt in legacy system)",
                        max_digits=5,
                    ),
                ),
                (
                    "tax_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Tax rate for this item",
                        max_digits=5,
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Tax amount for this item",
                        max_digits=10,
                    ),
                ),
                (
                    "line_subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Line subtotal before tax",
                        max_digits=12,
                    ),
                ),
                (
                    "line_total",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Line total including tax (maps to Pos_Betrag in legacy system)",
                        max_digits=12,
                    ),
                ),
                (
                    "item_type",
                    models.CharField(
                        choices=[
                            ("PRODUCT", "Product"),
                            ("SERVICE", "Service"),
                            ("TEXT", "Text"),
                            ("DISCOUNT", "Discount"),
                            ("SHIPPING", "Shipping"),
                            ("FEE", "Fee"),
                        ],
                        default="PRODUCT",
                        help_text="Type of item (maps to Art in legacy system)",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Notes for this item"),
                ),
                (
                    "fulfillment_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PARTIAL", "Partially Fulfilled"),
                            ("FULFILLED", "Fulfilled"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        help_text="Fulfillment status (derived from Picking_ok in legacy system)",
                        max_length=20,
                    ),
                ),
                (
                    "fulfilled_quantity",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Fulfilled quantity (maps to Pick_Menge in legacy system)",
                        max_digits=10,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        help_text="Product associated with this item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sales_record_items",
                        to="products.variantproduct",
                    ),
                ),
                (
                    "sales_record",
                    models.ForeignKey(
                        help_text="Sales record this item belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="line_items",
                        to="sales.salesrecord",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sales Record Item",
                "verbose_name_plural": "Sales Record Items",
                "ordering": ["sales_record", "position"],
                "indexes": [
                    models.Index(
                        fields=["sales_record"], name="sales_sales_sales_r_a8a22c_idx"
                    ),
                    models.Index(
                        fields=["product_code"], name="sales_sales_product_3b65dc_idx"
                    ),
                    models.Index(
                        fields=["legacy_id"], name="sales_sales_legacy__f210c3_idx"
                    ),
                ],
                "unique_together": {("sales_record", "position")},
            },
        ),
        migrations.AddIndex(
            model_name="salesrecord",
            index=models.Index(
                fields=["record_number"], name="sales_sales_record__66556b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="salesrecord",
            index=models.Index(
                fields=["record_date"], name="sales_sales_record__1d30d3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="salesrecord",
            index=models.Index(
                fields=["customer"], name="sales_sales_custome_b19cdd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="salesrecord",
            index=models.Index(
                fields=["payment_status"], name="sales_sales_payment_fa6dd3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="salesrecord",
            index=models.Index(
                fields=["legacy_id"], name="sales_sales_legacy__26efcb_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="salesrecord",
            unique_together={("record_number", "record_type")},
        ),
    ]
