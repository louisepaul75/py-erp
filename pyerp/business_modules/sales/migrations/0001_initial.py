# Generated by Django 5.1.7 on 2025-03-28 18:56

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("products", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "customer_number",
                    models.CharField(
                        help_text="Customer number (maps to KundenNr in legacy system)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, help_text="Customer name", max_length=200
                    ),
                ),
                (
                    "legacy_address_number",
                    models.CharField(
                        blank=True,
                        help_text="Address number in legacy system (AdrNr)",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "customer_group",
                    models.CharField(
                        blank=True,
                        help_text="Customer group (maps to Kundengr in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "delivery_block",
                    models.BooleanField(
                        default=False,
                        help_text="Whether deliveries are blocked (maps to Liefersperre)",
                    ),
                ),
                (
                    "price_group",
                    models.CharField(
                        blank=True,
                        help_text="Price group (maps to Preisgru in legacy system)",
                        max_length=10,
                    ),
                ),
                (
                    "vat_id",
                    models.CharField(
                        blank=True,
                        help_text="VAT ID number (maps to USt_IdNr in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        blank=True,
                        help_text="Payment method (maps to Zahlungsart in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "shipping_method",
                    models.CharField(
                        blank=True,
                        help_text="Shipping method (maps to Versandart in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "credit_limit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Credit limit (maps to Kreditlimit in legacy system)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Discount percentage (maps to Rabatt in legacy system)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "payment_terms_discount_days",
                    models.IntegerField(
                        blank=True,
                        help_text="Days for early payment discount (maps to SkontoTage)",
                        null=True,
                    ),
                ),
                (
                    "payment_terms_net_days",
                    models.IntegerField(
                        blank=True,
                        help_text="Days until payment is due (maps to NettoTage)",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal notes about the customer"
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer",
                "verbose_name_plural": "Customers",
                "indexes": [
                    models.Index(
                        fields=["customer_number"],
                        name="sales_custo_custome_2f5268_idx",
                    ),
                    models.Index(
                        fields=["legacy_id"], name="sales_custo_legacy__ec6763_idx"
                    ),
                    models.Index(
                        fields=["customer_group"], name="sales_custo_custome_46037d_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "address_number",
                    models.CharField(
                        blank=True,
                        help_text="Address number from legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the primary address for the customer",
                    ),
                ),
                (
                    "salutation",
                    models.CharField(
                        blank=True,
                        help_text="Salutation (maps to Anrede in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        help_text="First name (maps to Vorname in legacy system)",
                        max_length=100,
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        help_text="Last name (maps to Name1 in legacy system)",
                        max_length=100,
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        blank=True,
                        help_text="Company name (maps to Name2 in legacy system)",
                        max_length=200,
                    ),
                ),
                (
                    "street",
                    models.CharField(
                        blank=True,
                        help_text="Street address (maps to Strasse in legacy system)",
                        max_length=200,
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        help_text="Country code (maps to Land in legacy system)",
                        max_length=2,
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True,
                        help_text="Postal code (maps to PLZ in legacy system)",
                        max_length=20,
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        help_text="City (maps to Ort in legacy system)",
                        max_length=100,
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Phone number (maps to Telefon in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "fax",
                    models.CharField(
                        blank=True,
                        help_text="Fax number (maps to Fax in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address (maps to e_Mail in legacy system)",
                        max_length=254,
                    ),
                ),
                (
                    "contact_person",
                    models.CharField(
                        blank=True,
                        help_text="Contact person (maps to Ansprechp in legacy system)",
                        max_length=200,
                    ),
                ),
                (
                    "formal_salutation",
                    models.CharField(
                        blank=True,
                        help_text="Formal salutation (maps to Briefanrede in legacy system)",
                        max_length=200,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="Customer this address belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addresses",
                        to="sales.customer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Address",
                "verbose_name_plural": "Addresses",
            },
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("code", models.CharField(max_length=20)),
                ("active", models.BooleanField(default=True)),
                ("requires_authorization", models.BooleanField(default=False)),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Payment Method",
                "verbose_name_plural": "Payment Methods",
                "unique_together": {("name", "code")},
            },
        ),
        migrations.CreateModel(
            name="PaymentTerms",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("days_due", models.IntegerField()),
                ("discount_days", models.IntegerField(default=0)),
                (
                    "discount_percent",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Payment Terms",
                "verbose_name_plural": "Payment Terms",
                "unique_together": {("days_due", "discount_days", "discount_percent")},
            },
        ),
        migrations.CreateModel(
            name="SalesRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "record_number",
                    models.CharField(
                        help_text="Document number (maps to PapierNr in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "record_date",
                    models.DateField(
                        help_text="Document date (maps to Datum in legacy system)"
                    ),
                ),
                (
                    "record_type",
                    models.CharField(
                        choices=[
                            ("INVOICE", "Invoice"),
                            ("PROPOSAL", "Proposal"),
                            ("DELIVERY_NOTE", "Delivery Note"),
                            ("CREDIT_NOTE", "Credit Note"),
                            ("ORDER_CONFIRMATION", "Order Confirmation"),
                        ],
                        default="INVOICE",
                        help_text="Type of document (maps to Papierart in legacy system)",
                        max_length=20,
                    ),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Subtotal amount before tax (maps to Netto in legacy system)",
                        max_digits=12,
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Tax amount (maps to MWST_EUR in legacy system)",
                        max_digits=12,
                    ),
                ),
                (
                    "shipping_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Shipping cost (maps to Frachtkosten in legacy system)",
                        max_digits=10,
                    ),
                ),
                (
                    "handling_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Handling fee (maps to Bearbeitungskos in legacy system)",
                        max_digits=10,
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Total amount including tax (maps to Endbetrag in legacy system)",
                        max_digits=12,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PAID", "Paid"),
                            ("OVERDUE", "Overdue"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        help_text="Payment status (derived from bezahlt in legacy system)",
                        max_length=20,
                    ),
                ),
                (
                    "payment_date",
                    models.DateField(
                        blank=True,
                        help_text="Date of payment (maps to ZahlungsDat in legacy system)",
                        null=True,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="EUR",
                        help_text="Currency code (maps to Währung in legacy system)",
                        max_length=3,
                    ),
                ),
                (
                    "tax_type",
                    models.CharField(
                        blank=True,
                        help_text="Tax type (maps to MWSt_Art in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes (maps to Text in legacy system)"
                    ),
                ),
                (
                    "billing_address",
                    models.ForeignKey(
                        blank=True,
                        help_text="Billing address (maps to Rech_Adr in legacy system)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="billing_records",
                        to="sales.address",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Customer associated with this record",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sales_records",
                        to="sales.customer",
                    ),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        blank=True,
                        help_text="Payment method for this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sales_records",
                        to="sales.paymentmethod",
                    ),
                ),
                (
                    "payment_terms",
                    models.ForeignKey(
                        blank=True,
                        help_text="Payment terms for this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sales_records",
                        to="sales.paymentterms",
                    ),
                ),
                (
                    "shipping_address",
                    models.ForeignKey(
                        blank=True,
                        help_text="Shipping address (maps to Lief_Adr in legacy system)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="shipping_records",
                        to="sales.address",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sales Record",
                "verbose_name_plural": "Sales Records",
            },
        ),
        migrations.CreateModel(
            name="SalesRecordItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                (
                    "position",
                    models.IntegerField(
                        help_text="Position in the sales record (maps to PosNr in legacy system)"
                    ),
                ),
                (
                    "legacy_sku",
                    models.CharField(
                        blank=True,
                        help_text="Product code (maps to ArtNr in legacy system)",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Item description (maps to Bezeichnung in legacy system)"
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Quantity (maps to Menge in legacy system)",
                        max_digits=10,
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Unit price (maps to Preis in legacy system)",
                        max_digits=12,
                    ),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Discount percentage (maps to Rabatt in legacy system)",
                        max_digits=5,
                    ),
                ),
                (
                    "tax_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Tax rate for this item",
                        max_digits=5,
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Tax amount for this item",
                        max_digits=10,
                    ),
                ),
                (
                    "line_subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Line subtotal before tax",
                        max_digits=12,
                    ),
                ),
                (
                    "line_total",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Line total including tax (maps to Pos_Betrag in legacy system)",
                        max_digits=12,
                    ),
                ),
                (
                    "item_type",
                    models.CharField(
                        choices=[
                            ("PRODUCT", "Product"),
                            ("SERVICE", "Service"),
                            ("TEXT", "Text"),
                            ("DISCOUNT", "Discount"),
                            ("SHIPPING", "Shipping"),
                            ("FEE", "Fee"),
                        ],
                        default="PRODUCT",
                        help_text="Type of item (maps to Art in legacy system)",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Notes for this item"),
                ),
                (
                    "fulfillment_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PARTIAL", "Partially Fulfilled"),
                            ("FULFILLED", "Fulfilled"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        help_text="Fulfillment status (derived from Picking_ok in legacy system)",
                        max_length=20,
                    ),
                ),
                (
                    "fulfilled_quantity",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Fulfilled quantity (maps to Pick_Menge in legacy system)",
                        max_digits=10,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        help_text="Product associated with this item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sales_record_items",
                        to="products.variantproduct",
                    ),
                ),
                (
                    "sales_record",
                    models.ForeignKey(
                        help_text="Sales record this item belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="line_items",
                        to="sales.salesrecord",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sales Record Item",
                "verbose_name_plural": "Sales Record Items",
                "ordering": ["sales_record", "position"],
            },
        ),
        migrations.CreateModel(
            name="ShippingMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in the legacy system",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "legacy_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last modification timestamp in legacy system",
                        null=True,
                    ),
                ),
                (
                    "is_synchronized",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this record is synchronized with the legacy system",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("code", models.CharField(max_length=20)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "default_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Shipping Method",
                "verbose_name_plural": "Shipping Methods",
                "unique_together": {("name", "code")},
            },
        ),
        migrations.AddField(
            model_name="salesrecord",
            name="shipping_method",
            field=models.ForeignKey(
                blank=True,
                help_text="Shipping method for this record",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="sales_records",
                to="sales.shippingmethod",
            ),
        ),
        migrations.AddIndex(
            model_name="address",
            index=models.Index(
                fields=["customer"], name="sales_addre_custome_5b0e04_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="address",
            index=models.Index(
                fields=["legacy_id"], name="sales_addre_legacy__0700b1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="address",
            index=models.Index(
                fields=["postal_code"], name="sales_addre_postal__b918d9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="address",
            index=models.Index(fields=["email"], name="sales_addre_email_d66234_idx"),
        ),
        migrations.AddConstraint(
            model_name="address",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_primary", True)),
                fields=("customer",),
                name="unique_primary_address_per_customer",
            ),
        ),
        migrations.AddIndex(
            model_name="salesrecorditem",
            index=models.Index(
                fields=["sales_record"], name="sales_sales_sales_r_a8a22c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="salesrecorditem",
            index=models.Index(
                fields=["legacy_sku"], name="sales_sales_legacy__888abb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="salesrecorditem",
            index=models.Index(
                fields=["legacy_id"], name="sales_sales_legacy__f210c3_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="salesrecorditem",
            unique_together={("sales_record", "position")},
        ),
        migrations.AddIndex(
            model_name="salesrecord",
            index=models.Index(
                fields=["record_number"], name="sales_sales_record__66556b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="salesrecord",
            index=models.Index(
                fields=["record_date"], name="sales_sales_record__1d30d3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="salesrecord",
            index=models.Index(
                fields=["customer"], name="sales_sales_custome_b19cdd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="salesrecord",
            index=models.Index(
                fields=["payment_status"], name="sales_sales_payment_fa6dd3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="salesrecord",
            index=models.Index(
                fields=["legacy_id"], name="sales_sales_legacy__26efcb_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="salesrecord",
            unique_together={("record_number", "record_type")},
        ),
    ]
