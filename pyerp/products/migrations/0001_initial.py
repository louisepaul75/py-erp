# Generated by Django 4.2.11 on 2025-02-27 14:02

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(help_text='Stock Keeping Unit (maps to ArtNr in legacy system)', max_length=50, unique=True)),
                ('base_sku', models.CharField(db_index=True, help_text='Base SKU without variant (maps to fk_ArtNr in legacy system)', max_length=50)),
                ('variant_code', models.CharField(blank=True, help_text='Variant code (maps to ArtikelArt in legacy system)', max_length=10)),
                ('legacy_id', models.CharField(blank=True, help_text='ID in the legacy system', max_length=50, null=True, unique=True)),
                ('name', models.CharField(help_text='Product name (maps to Bezeichnung in legacy system)', max_length=255)),
                ('name_en', models.CharField(blank=True, help_text='Product name in English (maps to Bezeichnung_ENG in legacy system)', max_length=255)),
                ('short_description', models.TextField(blank=True, help_text='Short product description (maps to Beschreibung_kurz in legacy system)')),
                ('short_description_en', models.TextField(blank=True, help_text='Short product description in English (maps to Beschreibung_kurz_ENG in legacy system)')),
                ('description', models.TextField(blank=True, help_text='Detailed product description (maps to Beschreibung in legacy system)')),
                ('description_en', models.TextField(blank=True, help_text='Detailed product description in English (maps to Beschreibung_ENG in legacy system)')),
                ('keywords', models.CharField(blank=True, help_text='Keywords for search (maps to Keywords in legacy system)', max_length=255)),
                ('dimensions', models.CharField(blank=True, help_text='Product dimensions (maps to Masse in legacy system)', max_length=50)),
                ('weight', models.IntegerField(blank=True, help_text='Product weight in grams (maps to Gewicht in legacy system)', null=True)),
                ('list_price', models.DecimalField(decimal_places=2, default=0, help_text='List price (maps to PreisL in legacy system)', max_digits=10)),
                ('wholesale_price', models.DecimalField(decimal_places=2, default=0, help_text='Wholesale price (maps to PreisH in legacy system)', max_digits=10)),
                ('gross_price', models.DecimalField(decimal_places=2, default=0, help_text='Gross price including tax (maps to PreisL_Brutto in legacy system)', max_digits=10)),
                ('cost_price', models.DecimalField(decimal_places=2, default=0, help_text='Cost price (maps to PreisEinkauf in legacy system)', max_digits=10)),
                ('stock_quantity', models.IntegerField(default=0, help_text='Current stock quantity (maps to Bestand in legacy system)')),
                ('min_stock_quantity', models.IntegerField(default=0, help_text='Minimum stock quantity (maps to MindBestand in legacy system)')),
                ('backorder_quantity', models.IntegerField(default=0, help_text='Quantity on backorder (maps to Auftragsbestand in legacy system)')),
                ('open_purchase_quantity', models.IntegerField(default=0, help_text='Quantity on open purchase orders (maps to bestelltOffen in legacy system)')),
                ('last_receipt_date', models.DateField(blank=True, help_text='Date of last stock receipt (maps to letzterZugang in legacy system)', null=True)),
                ('last_issue_date', models.DateField(blank=True, help_text='Date of last stock issue (maps to letzterAbgang in legacy system)', null=True)),
                ('units_sold_current_year', models.IntegerField(default=0, help_text='Units sold in current year (maps to ZugangJahr in legacy system)')),
                ('units_sold_previous_year', models.IntegerField(default=0, help_text='Units sold in previous year (maps to StVorJahr in legacy system)')),
                ('revenue_previous_year', models.DecimalField(decimal_places=2, default=0, help_text='Revenue in previous year (maps to EUR_VJahr in legacy system)', max_digits=12)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the product is active')),
                ('is_discontinued', models.BooleanField(default=False, help_text='Whether the product is discontinued (maps to Auslauf in legacy system)')),
                ('has_bom', models.BooleanField(default=False, help_text='Whether the product has a bill of materials (maps to St√ºckliste in legacy system)')),
                ('is_one_sided', models.BooleanField(default=False, help_text='Whether the product is one-sided (maps to eineSeite in legacy system)')),
                ('is_hanging', models.BooleanField(default=False, help_text='Whether the product is designed for hanging (maps to haengen in legacy system)')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the product was created in the system')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the product was last updated')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['sku'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Product image file', upload_to='products/')),
                ('alt_text', models.CharField(blank=True, help_text='Alternative text for the image', max_length=255)),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary image for the product')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Order in which to display the image')),
                ('product', models.ForeignKey(help_text='Product this image belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Category code (maps to ArtGruppe in legacy system)', max_length=20, unique=True)),
                ('name', models.CharField(help_text='Category name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Category description')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='products.productcategory')),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'ordering': ['code'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(blank=True, help_text='Product category (maps to ArtGruppe in legacy system)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='products.productcategory'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['base_sku'], name='products_pr_base_sk_1718b5_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='products_pr_categor_9edb3d_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_active'], name='products_pr_is_acti_ca4d9a_idx'),
        ),
    ]
