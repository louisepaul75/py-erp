from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0001_initial'),  # Adjust this to your actual initial migration
    ]

    operations = [
        # Create the new tables
        migrations.CreateModel(
            name='ParentProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(help_text='Stock Keeping Unit (maps to ArtNr in legacy system)', max_length=50, unique=True)),
                ('legacy_id', models.CharField(blank=True, help_text='ID in the legacy system', max_length=50, null=True, unique=True)),
                ('name', models.CharField(help_text='Product name (maps to Bezeichnung in legacy system)', max_length=255)),
                ('name_en', models.CharField(blank=True, help_text='Product name in English (maps to Bezeichnung_ENG in legacy system)', max_length=255)),
                ('short_description', models.TextField(blank=True, help_text='Short product description (maps to Beschreibung_kurz in legacy system)')),
                ('short_description_en', models.TextField(blank=True, help_text='Short product description in English')),
                ('description', models.TextField(blank=True, help_text='Full product description (maps to Beschreibung in legacy system)')),
                ('description_en', models.TextField(blank=True, help_text='Full product description in English')),
                ('keywords', models.CharField(blank=True, help_text='Search keywords', max_length=255)),
                ('dimensions', models.CharField(blank=True, help_text='Product dimensions (LxWxH)', max_length=50)),
                ('weight', models.IntegerField(blank=True, help_text='Weight in grams', null=True)),
                ('list_price', models.DecimalField(decimal_places=2, default=0, help_text='Retail price (maps to Laden price in legacy system)', max_digits=10)),
                ('wholesale_price', models.DecimalField(decimal_places=2, default=0, help_text='Wholesale price (maps to Handel price in legacy system)', max_digits=10)),
                ('gross_price', models.DecimalField(decimal_places=2, default=0, help_text='Recommended retail price (maps to Empf. price in legacy system)', max_digits=10)),
                ('cost_price', models.DecimalField(decimal_places=2, default=0, help_text='Cost price (maps to Einkauf price in legacy system)', max_digits=10)),
                ('stock_quantity', models.IntegerField(default=0, help_text='Current stock quantity')),
                ('min_stock_quantity', models.IntegerField(default=0, help_text='Minimum stock quantity before reordering')),
                ('backorder_quantity', models.IntegerField(default=0, help_text='Quantity on backorder')),
                ('open_purchase_quantity', models.IntegerField(default=0, help_text='Quantity on open purchase orders')),
                ('last_receipt_date', models.DateField(blank=True, help_text='Date of last stock receipt', null=True)),
                ('last_issue_date', models.DateField(blank=True, help_text='Date of last stock issue', null=True)),
                ('units_sold_current_year', models.IntegerField(default=0, help_text='Units sold in current year')),
                ('units_sold_previous_year', models.IntegerField(default=0, help_text='Units sold in previous year')),
                ('revenue_previous_year', models.DecimalField(decimal_places=2, default=0, help_text='Revenue in previous year', max_digits=12)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the product is active')),
                ('is_discontinued', models.BooleanField(default=False, help_text='Whether the product is discontinued')),
                ('has_bom', models.BooleanField(default=False, help_text='Whether the product has a bill of materials')),
                ('is_one_sided', models.BooleanField(default=False, help_text='Whether the product is one-sided')),
                ('is_hanging', models.BooleanField(default=False, help_text='Whether the product is hanging')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last update timestamp')),
                ('base_sku', models.CharField(db_index=True, help_text='Base SKU for variants', max_length=50)),
                ('category', models.ForeignKey(blank=True, help_text='Product category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parentproduct_products', to='products.ProductCategory')),
            ],
            options={
                'verbose_name': 'Parent Product',
                'verbose_name_plural': 'Parent Products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VariantProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(help_text='Stock Keeping Unit (maps to ArtNr in legacy system)', max_length=50, unique=True)),
                ('legacy_id', models.CharField(blank=True, help_text='ID in the legacy system', max_length=50, null=True, unique=True)),
                ('name', models.CharField(help_text='Product name (maps to Bezeichnung in legacy system)', max_length=255)),
                ('name_en', models.CharField(blank=True, help_text='Product name in English (maps to Bezeichnung_ENG in legacy system)', max_length=255)),
                ('short_description', models.TextField(blank=True, help_text='Short product description (maps to Beschreibung_kurz in legacy system)')),
                ('short_description_en', models.TextField(blank=True, help_text='Short product description in English')),
                ('description', models.TextField(blank=True, help_text='Full product description (maps to Beschreibung in legacy system)')),
                ('description_en', models.TextField(blank=True, help_text='Full product description in English')),
                ('keywords', models.CharField(blank=True, help_text='Search keywords', max_length=255)),
                ('dimensions', models.CharField(blank=True, help_text='Product dimensions (LxWxH)', max_length=50)),
                ('weight', models.IntegerField(blank=True, help_text='Weight in grams', null=True)),
                ('list_price', models.DecimalField(decimal_places=2, default=0, help_text='Retail price (maps to Laden price in legacy system)', max_digits=10)),
                ('wholesale_price', models.DecimalField(decimal_places=2, default=0, help_text='Wholesale price (maps to Handel price in legacy system)', max_digits=10)),
                ('gross_price', models.DecimalField(decimal_places=2, default=0, help_text='Recommended retail price (maps to Empf. price in legacy system)', max_digits=10)),
                ('cost_price', models.DecimalField(decimal_places=2, default=0, help_text='Cost price (maps to Einkauf price in legacy system)', max_digits=10)),
                ('stock_quantity', models.IntegerField(default=0, help_text='Current stock quantity')),
                ('min_stock_quantity', models.IntegerField(default=0, help_text='Minimum stock quantity before reordering')),
                ('backorder_quantity', models.IntegerField(default=0, help_text='Quantity on backorder')),
                ('open_purchase_quantity', models.IntegerField(default=0, help_text='Quantity on open purchase orders')),
                ('last_receipt_date', models.DateField(blank=True, help_text='Date of last stock receipt', null=True)),
                ('last_issue_date', models.DateField(blank=True, help_text='Date of last stock issue', null=True)),
                ('units_sold_current_year', models.IntegerField(default=0, help_text='Units sold in current year')),
                ('units_sold_previous_year', models.IntegerField(default=0, help_text='Units sold in previous year')),
                ('revenue_previous_year', models.DecimalField(decimal_places=2, default=0, help_text='Revenue in previous year', max_digits=12)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the product is active')),
                ('is_discontinued', models.BooleanField(default=False, help_text='Whether the product is discontinued')),
                ('has_bom', models.BooleanField(default=False, help_text='Whether the product has a bill of materials')),
                ('is_one_sided', models.BooleanField(default=False, help_text='Whether the product is one-sided')),
                ('is_hanging', models.BooleanField(default=False, help_text='Whether the product is hanging')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last update timestamp')),
                ('variant_code', models.CharField(blank=True, help_text='Variant code (maps to ArtikelArt in legacy system)', max_length=10)),
                ('legacy_sku', models.CharField(blank=True, help_text='Legacy SKU (maps to alteNummer in Artikel_Variante)', max_length=50, null=True)),
                ('base_sku', models.CharField(db_index=True, help_text='Base SKU without variant (maps to fk_ArtNr in legacy system)', max_length=50)),
                ('category', models.ForeignKey(blank=True, help_text='Product category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='variantproduct_products', to='products.ProductCategory')),
                ('parent', models.ForeignKey(help_text='Parent product', on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='products.ParentProduct')),
            ],
            options={
                'verbose_name': 'Variant Product',
                'verbose_name_plural': 'Variant Products',
                'ordering': ['parent__name', 'variant_code'],
                'unique_together': {('parent', 'variant_code')},
            },
        ),
    ] 