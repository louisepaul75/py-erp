# Generated by Django 5.1.6 on 2025-03-05 00:37

from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('products', '0005_alter_imagesynclog_id_and_more'), ('products', '0006_alter_imagesynclog_id_and_more'), ('products', '0007_alter_variantproduct_legacy_familie'), ('products', '0008_alter_variantproduct_legacy_familie'), ('products', '0009_alter_variantproduct_legacy_familie'), ('products', '0010_alter_variantproduct_legacy_familie'), ('products', '0011_cleanup_migrations')]

    dependencies = [
        ('products', '0004_alter_parentproduct_is_active_and_more'),
    ]

    operations = [
        # Fix ImageSyncLog.id field to be a proper BigAutoField
        migrations.AlterField(
            model_name='imagesynclog',
            name='id',
            field=models.BigAutoField(primary_key=True, serialize=False),
        ),
        
        # Ensure the database column is also a bigint
        migrations.RunSQL(
            sql="""
            -- First, check if the column is already a bigint
            DO $$
            BEGIN
                IF EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name = 'products_imagesynclog' 
                    AND column_name = 'id' 
                    AND data_type = 'integer'
                ) THEN
                    -- Alter the column type to bigint
                    ALTER TABLE products_imagesynclog ALTER COLUMN id TYPE bigint;
                END IF;
            END $$;
            """,
            reverse_sql="SELECT 1;",
        ),
        
        # Ensure the VariantProduct.legacy_familie field is properly mapped
        migrations.RunSQL(
            sql="""
            -- Check if the column exists with the wrong name and fix it
            DO $$
            BEGIN
                IF EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name = 'products_variantproduct' 
                    AND column_name = 'legacy_familie'
                ) AND NOT EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name = 'products_variantproduct' 
                    AND column_name = 'familie_'
                ) THEN
                    -- Rename the column to match the db_column in the model
                    ALTER TABLE products_variantproduct RENAME COLUMN legacy_familie TO familie_;
                END IF;
            END $$;
            """,
            reverse_sql="SELECT 1;",
        ),
        
        # Update content type to ensure consistency
        migrations.RunSQL(
            sql="UPDATE django_content_type SET model = 'variantproduct' WHERE app_label = 'products' AND model = 'variantproduct';",
            reverse_sql="SELECT 1;",
        ),
    ]
